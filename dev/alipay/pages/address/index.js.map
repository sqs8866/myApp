{"version":3,"file":"pages/address/index.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AAAA;AAAA;AAGA;AAAA;AAEA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAmDA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA9DA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgsources":["webpack://myApp/./src/pages/address/index.tsx","webpack://myApp/./src/pages/address/CityList/index.tsx","webpack://myApp/./src/pages/address/index.tsx?b2d6"],"sourcesContent":["import Taro from '@tarojs/taro'\r\nimport  { Component } from 'react'\r\nimport { View, Map, Image, Text, Textarea } from '@tarojs/components'\r\nimport store from '@store/index'\r\nimport { updateGlobalData } from '@store/reducers'\r\nimport { GPS } from '@lib/GPS'\r\nimport { queryError } from '@utils/utils'\r\nimport LocationUtils from '@utils/locationUtil'\r\nimport CityListView from './CityList/index'\r\nimport {\r\n  mGetNearbypois,\r\n} from '@api/actions'\r\nimport './index.scss'\r\n\r\n\r\nconst ps2 = \"请输入城市中文名或拼音\"\r\n\r\nclass Address extends Component<any, any>{\r\n  regionChangeTime: number = 0;\r\n  constructor(props: any) {\r\n    super(props)\r\n    this.state = {\r\n      content: '',\r\n      placeStr: \"您在哪上车\",\r\n      selectCity: {\r\n        name: '', //选中的城市name\r\n        realName: '',//n如果开通城市是三级，则name是三级的父级城市名字，realName是三级的名字\r\n        id: '',//选中的城市id\r\n        latitude: 0,\r\n        longitude: 0\r\n      },\r\n      cityListShow: false,\r\n      remmendList: [],\r\n      cityList: [],\r\n      calloutAddress: '',\r\n    }\r\n  }\r\n  async componentDidMount() {\r\n    const { startAddress } = store.getState().globalData;\r\n    if (startAddress.latitude && startAddress.longitude) {\r\n      await this.getAllCityList();\r\n      this.mapChanged(startAddress);\r\n    }\r\n  }\r\n\r\n  async mapChanged(e) {\r\n    console.log('aaaaaaaaaaaa')\r\n    console.log(e)\r\n    await this.locToCityInfo(e)\r\n    this.getRecommendStart(e)\r\n  }\r\n  async locToCityInfo(coord): Promise<void> {\r\n    const info = await LocationUtils.getBDAddressMsg(coord.latitude, coord.longitude)\r\n    if (!info) return;\r\n    let loc = info.loc;\r\n    let selectCity = {\r\n      name: loc.cityName,//这个是展示的名字，二级城市的名字\r\n      latitude: coord.latitude,\r\n      longitude: coord.longitude\r\n    }\r\n    this.setState({ selectCity, calloutAddress: loc.name })\r\n  }\r\n\r\n  //推荐出发地\r\n  async getRecommendStart(e) {\r\n    const res = LocationUtils.mGetNearbypois(e);\r\n    this.setState({\r\n      remmendList: res\r\n    })\r\n  }\r\n\r\n  //点击左上角城市名字事件\r\n  handlerCityView = async () => {\r\n    if (this.state.cityListShow) return;\r\n    let list = this.state.cityList;\r\n    if (list.length <= 0) {\r\n      await this.getAllCityList();\r\n    }\r\n\r\n    this.setState({\r\n      cityListShow: true,\r\n      placeStr: ps2,\r\n      content: '',//置空textarea\r\n    })\r\n  }\r\n  async selectedAddress(address) {\r\n    let info: any = await LocationUtils.getBDAddressMsg(address.lat || address.latitude, address.lng || address.longitude, true);\r\n    const startAddress = { ...info.loc, cityId: info.cityId }\r\n    await store.dispatch(updateGlobalData({ startAddress }))\r\n    Taro.eventCenter.trigger('selectStartAddress', info)\r\n    Taro.navigateBack()\r\n  }\r\n  //选中地图下面的推荐地址\r\n  remmendItemAction(e) {\r\n    const remend = e.currentTarget.dataset.remend;\r\n    this.selectedAddress(remend)\r\n  }\r\n  //从城市列表里选择了城市\r\n  handlerSelectCity(e) {\r\n    let selectCity = { ...this.state.selectCity, name: e.name, id: e.cityId }\r\n    this.setState({\r\n      selectCity,\r\n      cityListShow: false,\r\n      placeStr: \"您在哪上车\",\r\n      content: '', //置空textarea\r\n    })\r\n    let coord = GPS.bd_decrypt(e.lat, e.lng)\r\n    this.mapChanged({\r\n      latitude: coord.lat,\r\n      longitude: coord.lon,\r\n      name: e.name\r\n    })\r\n  }\r\n\r\n  async getAllCityList() {\r\n    if (this.state.cityList.length > 0) return;\r\n    this.setState({\r\n      cityList: [{\r\n        cities: [{\r\n          name: \"北京市\",\r\n          lat: 39.910501,\r\n          lng: 116.413772\r\n        }, {\r\n          name: \"上海市\",\r\n          lat: 31.237661,\r\n          lng: 121.479176\r\n        }, {\r\n          name: \"杭州市\",\r\n          lat: 30.293395,\r\n          lng: 120.160105\r\n        }, {\r\n          name: \"成都市\",\r\n          lat: 30.665531,\r\n          lng: 104.072215\r\n        }], name: '热门城市'\r\n      }]\r\n    })\r\n  }\r\n  render() {\r\n    const { content, placeStr, selectCity, cityListShow, remmendList, cityList, calloutAddress } = this.state;\r\n    return (\r\n      <View>\r\n        <View className='address_inputBg'>\r\n          <View className='address_city_select' onTap={this.handlerCityView}>\r\n            <Text className='address_city_name'>{selectCity.name}</Text>\r\n            <Image className='address_city_arrow' src={require('../../res/nav_icon_unfold.png')}></Image>\r\n          </View>\r\n          <Text className='address_line'>|</Text>\r\n          <Textarea className={process.env.TARO_ENV == 'alipay' ? 'address_input address_special_input_alipay' : 'address_input'} value={content} confirmType=\"done\" placeholderClass='placeholder_class' placeholder={placeStr} maxlength={20} onInput={this.textareaInputChaned}></Textarea>\r\n        </View>\r\n        <View className='address_mapBg'>\r\n          <Map id=\"map\" scale={14} style={{ width: '100%', height: '100%' }} latitude={selectCity.latitude} longitude={selectCity.longitude}></Map>\r\n          <Image className='address_iconCenter' src={require('../../res/center-location.png')}></Image>\r\n          {\r\n            calloutAddress &&\r\n            <View className=\"address_callout\">\r\n              <View className=\"address_callout_center\">{calloutAddress}</View>\r\n              <View className=\"address_arrow_down\"></View>\r\n            </View>\r\n          }\r\n        </View>\r\n        {\r\n          !cityListShow &&\r\n          <View className='address_remmendBg'>\r\n            {\r\n              remmendList.map((el, index) => {\r\n                return (\r\n                  <View className='address_remItem' key={el.lat + index} data-remend={el} onTap={this.remmendItemAction.bind(this)}>\r\n                    <Text className='address_remName'>{el.name}</Text>\r\n                    <Text className='address_remDetail'>{el.address || el.addressDetail}</Text>\r\n                  </View>\r\n                )\r\n              })\r\n            }\r\n          </View>\r\n        }\r\n        {\r\n          // 支付宝小程序来回切换map的时候会有问题，所以就一直显示，不能隐藏，只能把citylist定位absolute\r\n          cityListShow &&\r\n          <View className='cityList_bg'>\r\n            <CityListView selectCity={selectCity} cityList={cityList} selectedCityAction={this.handlerSelectCity.bind(this)}></CityListView>\r\n          </View>\r\n        }\r\n      </View>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Address","import { Component } from 'react'\r\nimport { View, ScrollView } from '@tarojs/components'\r\nimport './index.scss'\r\n\r\n\r\nexport default class CityListView extends Component<any, any>{\r\n  constructor(props: any) {\r\n    super(props)\r\n    this.state = {\r\n      height: 600,\r\n      scrollTopId: '',//城市列表，控制滑动到哪个字母\r\n    }\r\n  }\r\n  handlerSelectCity(e) {\r\n    let city = e.currentTarget.dataset.city;\r\n    this.props.selectedCityAction(city);\r\n  }\r\n\r\n  render() {\r\n    const { selectCity, cityList } = this.props;\r\n    const { height, scrollTopId } = this.state;\r\n    return (\r\n      <View>\r\n        <View className='city_list_item'>当前定位城市：{selectCity.name}</View>\r\n        <ScrollView className='city_list' scrollY={true} scrollIntoView={scrollTopId} style={{ height: `${height}px` }}>\r\n          {\r\n            cityList.map((el, index) => {\r\n              return (\r\n                <View className='city' id={index == 0 ? 'one' : el.name} key={el.name}>\r\n                  <View className='city_list_item city_title'>{el.name}</View>\r\n                  {\r\n                    el.cities.map((city,y) => {\r\n                      return (\r\n                        <View catchMove className='city_list_item' data-city={city} onTap={this.handlerSelectCity.bind(this)} key={y}>{city.name}</View>\r\n                      )\r\n                    })\r\n                  }\r\n                </View>\r\n              )\r\n            })\r\n          }\r\n        </ScrollView>\r\n      </View>\r\n    )\r\n  }\r\n}","import { createPageConfig } from '@tarojs/runtime'\nimport component from \"../../../node_modules/babel-loader/lib/index.js??ruleSet[1].rules[5].use[0]!./index.tsx\"\nvar config = {};\n\n\nvar inst = Page(createPageConfig(component, 'pages/address/index', {root:{cn:[]}}, config || {}))\n\n\nexport default component\n"],"names":[],"sourceRoot":""}