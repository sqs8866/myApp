"use strict";
(my["webpackJsonp"] = my["webpackJsonp"] || []).push([["vendors-node_modules_taro_alipay_prebundle_chunk-JXIMPO2G_js"],{

/***/ "./node_modules/.taro/alipay/prebundle/chunk-JXIMPO2G.js":
/*!***************************************************************!*\
  !*** ./node_modules/.taro/alipay/prebundle/chunk-JXIMPO2G.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Current": function() { return /* binding */ Current; },
/* harmony export */   "FormElement": function() { return /* binding */ FormElement; },
/* harmony export */   "History": function() { return /* binding */ History; },
/* harmony export */   "Location": function() { return /* binding */ Location; },
/* harmony export */   "MutationObserver": function() { return /* binding */ MutationObserver; },
/* harmony export */   "SVGElement": function() { return /* binding */ SVGElement; },
/* harmony export */   "Style": function() { return /* binding */ Style; },
/* harmony export */   "TaroElement": function() { return /* binding */ TaroElement; },
/* harmony export */   "TaroEvent": function() { return /* binding */ TaroEvent; },
/* harmony export */   "TaroNode": function() { return /* binding */ TaroNode; },
/* harmony export */   "TaroRootElement": function() { return /* binding */ TaroRootElement; },
/* harmony export */   "TaroText": function() { return /* binding */ TaroText; },
/* harmony export */   "URL": function() { return /* binding */ URL; },
/* harmony export */   "URLSearchParams": function() { return /* binding */ URLSearchParams; },
/* harmony export */   "_caf": function() { return /* binding */ _caf; },
/* harmony export */   "_raf": function() { return /* binding */ _raf; },
/* harmony export */   "addLeadingSlash": function() { return /* binding */ addLeadingSlash; },
/* harmony export */   "createComponentConfig": function() { return /* binding */ createComponentConfig; },
/* harmony export */   "createEvent": function() { return /* binding */ createEvent; },
/* harmony export */   "createPageConfig": function() { return /* binding */ createPageConfig; },
/* harmony export */   "createRecursiveComponentConfig": function() { return /* binding */ createRecursiveComponentConfig; },
/* harmony export */   "document$1": function() { return /* binding */ document$1; },
/* harmony export */   "eventCenter": function() { return /* binding */ eventCenter; },
/* harmony export */   "eventHandler": function() { return /* binding */ eventHandler; },
/* harmony export */   "eventSource": function() { return /* binding */ eventSource; },
/* harmony export */   "getComputedStyle": function() { return /* binding */ getComputedStyle; },
/* harmony export */   "getCurrentInstance": function() { return /* binding */ getCurrentInstance; },
/* harmony export */   "getPageInstance": function() { return /* binding */ getPageInstance; },
/* harmony export */   "history": function() { return /* binding */ history; },
/* harmony export */   "hydrate": function() { return /* binding */ hydrate; },
/* harmony export */   "incrementId": function() { return /* binding */ incrementId; },
/* harmony export */   "init_runtime_esm": function() { return /* binding */ init_runtime_esm; },
/* harmony export */   "injectPageInstance": function() { return /* binding */ injectPageInstance; },
/* harmony export */   "location": function() { return /* binding */ location; },
/* harmony export */   "nav": function() { return /* binding */ nav; },
/* harmony export */   "nextTick": function() { return /* binding */ nextTick; },
/* harmony export */   "now": function() { return /* binding */ now; },
/* harmony export */   "options": function() { return /* binding */ options; },
/* harmony export */   "parseUrl": function() { return /* binding */ parseUrl; },
/* harmony export */   "removePageInstance": function() { return /* binding */ removePageInstance; },
/* harmony export */   "runtime_esm_exports": function() { return /* binding */ runtime_esm_exports; },
/* harmony export */   "safeExecute": function() { return /* binding */ safeExecute; },
/* harmony export */   "stringify": function() { return /* binding */ stringify; },
/* harmony export */   "window$1": function() { return /* binding */ window$1; }
/* harmony export */ });
/* harmony import */ var _chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-GP2QOTEZ.js */ "./node_modules/.taro/alipay/prebundle/chunk-GP2QOTEZ.js");
/* harmony import */ var _chunk_P7VEE7PG_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chunk-P7VEE7PG.js */ "./node_modules/.taro/alipay/prebundle/chunk-P7VEE7PG.js");
/* provided dependency */ var window = __webpack_require__(/*! ./node_modules/.taro/alipay/prebundle/chunk-JXIMPO2G.js */ "./node_modules/.taro/alipay/prebundle/chunk-JXIMPO2G.js")["window$1"];
/* provided dependency */ var document = __webpack_require__(/*! ./node_modules/.taro/alipay/prebundle/chunk-JXIMPO2G.js */ "./node_modules/.taro/alipay/prebundle/chunk-JXIMPO2G.js")["document$1"];
/* provided dependency */ var requestAnimationFrame = __webpack_require__(/*! ./node_modules/.taro/alipay/prebundle/chunk-JXIMPO2G.js */ "./node_modules/.taro/alipay/prebundle/chunk-JXIMPO2G.js")["_raf"];
/* provided dependency */ var cancelAnimationFrame = __webpack_require__(/*! ./node_modules/.taro/alipay/prebundle/chunk-JXIMPO2G.js */ "./node_modules/.taro/alipay/prebundle/chunk-JXIMPO2G.js")["_caf"];
function _array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _array_with_holes(arr) {
    if (Array.isArray(arr)) return arr;
}
function _array_without_holes(arr) {
    if (Array.isArray(arr)) return _array_like_to_array(arr);
}
function _assert_this_initialized(self) {
    if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self;
}
function _class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _construct(Parent, args, Class) {
    if (_is_native_reflect_construct()) {
        _construct = Reflect.construct;
    } else {
        _construct = function construct(Parent, args, Class) {
            var a = [
                null
            ];
            a.push.apply(a, args);
            var Constructor = Function.bind.apply(Parent, a);
            var instance = new Constructor();
            if (Class) _set_prototype_of(instance, Class.prototype);
            return instance;
        };
    }
    return _construct.apply(null, arguments);
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _create_class(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _get(target, property, receiver) {
    if (typeof Reflect !== "undefined" && Reflect.get) {
        _get = Reflect.get;
    } else {
        _get = function get(target, property, receiver) {
            var base = _super_prop_base(target, property);
            if (!base) return;
            var desc = Object.getOwnPropertyDescriptor(base, property);
            if (desc.get) {
                return desc.get.call(receiver || target);
            }
            return desc.value;
        };
    }
    return _get(target, property, receiver || target);
}
function _get_prototype_of(o) {
    _get_prototype_of = Object.setPrototypeOf ? Object.getPrototypeOf : function getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _get_prototype_of(o);
}
function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            writable: true,
            configurable: true
        }
    });
    if (superClass) _set_prototype_of(subClass, superClass);
}
function _is_native_function(fn) {
    return Function.toString.call(fn).indexOf("[native code]") !== -1;
}
function _iterable_to_array(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _iterable_to_array_limit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
        }
    } catch (err) {
        _d = true;
        _e = err;
    } finally{
        try {
            if (!_n && _i["return"] != null) _i["return"]();
        } finally{
            if (_d) throw _e;
        }
    }
    return _arr;
}
function _non_iterable_rest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _non_iterable_spread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _possible_constructor_return(self, call) {
    if (call && (_type_of(call) === "object" || typeof call === "function")) {
        return call;
    }
    return _assert_this_initialized(self);
}
function set(target, property, value, receiver) {
    if (typeof Reflect !== "undefined" && Reflect.set) {
        set = Reflect.set;
    } else {
        set = function set(target, property, value, receiver) {
            var base = _super_prop_base(target, property);
            var desc;
            if (base) {
                desc = Object.getOwnPropertyDescriptor(base, property);
                if (desc.set) {
                    desc.set.call(receiver, value);
                    return true;
                } else if (!desc.writable) {
                    return false;
                }
            }
            desc = Object.getOwnPropertyDescriptor(receiver, property);
            if (desc) {
                if (!desc.writable) {
                    return false;
                }
                desc.value = value;
                Object.defineProperty(receiver, property, desc);
            } else {
                _define_property(receiver, property, value);
            }
            return true;
        };
    }
    return set(target, property, value, receiver);
}
function _set(target, property, value, receiver, isStrict) {
    var s = set(target, property, value, receiver || target);
    if (!s && isStrict) {
        throw new Error("failed to set property");
    }
    return value;
}
function _set_prototype_of(o, p) {
    _set_prototype_of = Object.setPrototypeOf || function setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    };
    return _set_prototype_of(o, p);
}
function _sliced_to_array(arr, i) {
    return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();
}
function _super_prop_base(object, property) {
    while(!Object.prototype.hasOwnProperty.call(object, property)){
        object = _get_prototype_of(object);
        if (object === null) break;
    }
    return object;
}
function _to_array(arr) {
    return _array_with_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_rest();
}
function _to_consumable_array(arr) {
    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();
}
function _type_of(obj) {
    "@swc/helpers - typeof";
    return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj;
}
function _unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
}
function _wrap_native_super(Class) {
    var _cache = typeof Map === "function" ? new Map() : undefined;
    _wrap_native_super = function wrapNativeSuper(Class) {
        if (Class === null || !_is_native_function(Class)) return Class;
        if (typeof Class !== "function") {
            throw new TypeError("Super expression must either be null or a function");
        }
        if (typeof _cache !== "undefined") {
            if (_cache.has(Class)) return _cache.get(Class);
            _cache.set(Class, Wrapper);
        }
        function Wrapper() {
            return _construct(Class, arguments, _get_prototype_of(this).constructor);
        }
        Wrapper.prototype = Object.create(Class.prototype, {
            constructor: {
                value: Wrapper,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        return _set_prototype_of(Wrapper, Class);
    };
    return _wrap_native_super(Class);
}
function _is_native_reflect_construct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
        return true;
    } catch (e) {
        return false;
    }
}
function _create_super(Derived) {
    var hasNativeReflectConstruct = _is_native_reflect_construct();
    return function _createSuperInternal() {
        var Super = _get_prototype_of(Derived), result;
        if (hasNativeReflectConstruct) {
            var NewTarget = _get_prototype_of(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
        } else {
            result = Super.apply(this, arguments);
        }
        return _possible_constructor_return(this, result);
    };
}


// node_modules/@tarojs/runtime/dist/runtime.esm.js
var runtime_esm_exports = {};
(0,_chunk_P7VEE7PG_js__WEBPACK_IMPORTED_MODULE_1__.__export)(runtime_esm_exports, {
    Current: function() {
        return Current;
    },
    Events: function() {
        return _chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.Events;
    },
    FormElement: function() {
        return FormElement;
    },
    History: function() {
        return History;
    },
    Location: function() {
        return Location;
    },
    MutationObserver: function() {
        return MutationObserver;
    },
    SVGElement: function() {
        return SVGElement;
    },
    Style: function() {
        return Style;
    },
    TaroElement: function() {
        return TaroElement;
    },
    TaroEvent: function() {
        return TaroEvent;
    },
    TaroNode: function() {
        return TaroNode;
    },
    TaroRootElement: function() {
        return TaroRootElement;
    },
    TaroText: function() {
        return TaroText;
    },
    URL: function() {
        return URL;
    },
    URLSearchParams: function() {
        return URLSearchParams;
    },
    addLeadingSlash: function() {
        return addLeadingSlash;
    },
    cancelAnimationFrame: function() {
        return _caf;
    },
    createComponentConfig: function() {
        return createComponentConfig;
    },
    createEvent: function() {
        return createEvent;
    },
    createPageConfig: function() {
        return createPageConfig;
    },
    createRecursiveComponentConfig: function() {
        return createRecursiveComponentConfig;
    },
    document: function() {
        return document$1;
    },
    eventCenter: function() {
        return eventCenter;
    },
    eventHandler: function() {
        return eventHandler;
    },
    eventSource: function() {
        return eventSource;
    },
    getComputedStyle: function() {
        return getComputedStyle;
    },
    getCurrentInstance: function() {
        return getCurrentInstance;
    },
    getPageInstance: function() {
        return getPageInstance;
    },
    history: function() {
        return history;
    },
    hooks: function() {
        return _chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.hooks;
    },
    hydrate: function() {
        return hydrate;
    },
    incrementId: function() {
        return incrementId;
    },
    injectPageInstance: function() {
        return injectPageInstance;
    },
    location: function() {
        return location;
    },
    navigator: function() {
        return nav;
    },
    nextTick: function() {
        return nextTick;
    },
    now: function() {
        return now;
    },
    options: function() {
        return options;
    },
    parseUrl: function() {
        return parseUrl;
    },
    removePageInstance: function() {
        return removePageInstance;
    },
    requestAnimationFrame: function() {
        return _raf;
    },
    safeExecute: function() {
        return safeExecute;
    },
    stringify: function() {
        return stringify;
    },
    window: function() {
        return window$1;
    }
});
function logMutation(observer, record) {
    observer.records.push(record);
    if (!pendingMuatations) {
        pendingMuatations = true;
        Promise.resolve().then(function() {
            pendingMuatations = false;
            observers.forEach(function(observer2) {
                return observer2.callback(observer2.takeRecords());
            });
        });
    }
}
function recordMutation(record) {
    observers.forEach(function(observer) {
        var options2 = observer.options;
        for(var t = record.target; t; t = t.parentNode){
            if (sidMatches(observer.target, t) && isConcerned(record, options2)) {
                logMutation(observer, record);
                break;
            }
            if (!options2.subtree) break;
        }
    });
}
function isElement(node) {
    return node.nodeType === 1;
}
function isText(node) {
    return node.nodeType === 3;
}
function isComment(node) {
    return node.nodeName === COMMENT;
}
function isHasExtractProp(el) {
    var res = Object.keys(el.props).find(function(prop) {
        return !(/^(class|style|id)$/.test(prop) || prop.startsWith("data-"));
    });
    return Boolean(res);
}
function isParentBinded(node, type) {
    var _a;
    var res = false;
    while((node === null || node === void 0 ? void 0 : node.parentElement) && node.parentElement._path !== ROOT_STR){
        if ((_a = node.parentElement.__handlers[type]) === null || _a === void 0 ? void 0 : _a.length) {
            res = true;
            break;
        }
        node = node.parentElement;
    }
    return res;
}
function shortcutAttr(key) {
    switch(key){
        case STYLE:
            return "st";
        case ID:
            return UID;
        case CLASS:
            return "cl";
        default:
            return key;
    }
}
function extend(ctor, methodName, options2) {
    if ((0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(options2)) {
        options2 = {
            value: options2
        };
    }
    Object.defineProperty(ctor.prototype, methodName, Object.assign({
        configurable: true,
        enumerable: true
    }, options2));
}
function getComponentsAlias2() {
    if (!componentsAlias$1) {
        componentsAlias$1 = (0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.getComponentsAlias)(_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.internalComponents);
    }
    return componentsAlias$1;
}
function hydrate(node) {
    if (!componentsAlias) {
        componentsAlias = getComponentsAlias2();
    }
    if (!SPECIAL_NODES) {
        SPECIAL_NODES = _chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.hooks.call("getSpecialNodes");
    }
    var nodeName = node.nodeName;
    if (isText(node)) {
        var _obj;
        return _obj = {}, _define_property(_obj, "v", node.nodeValue), _define_property(_obj, "nn", componentsAlias[nodeName]._num), _obj;
    }
    var _obj1;
    var data = (_obj1 = {}, _define_property(_obj1, "nn", nodeName), _define_property(_obj1, "sid", node.sid), _obj1);
    if (node.uid !== node.sid) {
        data.uid = node.uid;
    }
    if (!node.isAnyEventBinded() && SPECIAL_NODES.indexOf(nodeName) > -1) {
        data["nn"] = "static-".concat(nodeName);
        if (nodeName === VIEW && !isHasExtractProp(node)) {
            data["nn"] = PURE_VIEW;
        }
    }
    var props = node.props;
    for(var prop in props){
        var propInCamelCase = (0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.toCamelCase)(prop);
        if (!prop.startsWith("data-") && prop !== CLASS && prop !== STYLE && prop !== ID && propInCamelCase !== CATCHMOVE) {
            data[propInCamelCase] = props[prop];
        }
        if (nodeName === VIEW && propInCamelCase === CATCHMOVE && props[prop] !== false) {
            data["nn"] = CATCH_VIEW;
        }
    }
    var childNodes = node.childNodes;
    childNodes = childNodes.filter(function(node2) {
        return !isComment(node2);
    });
    if (childNodes.length > 0) {
        data["cn"] = childNodes.map(hydrate);
    } else {
        data["cn"] = [];
    }
    if (node.className !== "") {
        data["cl"] = node.className;
    }
    var cssText = node.cssText;
    if (cssText !== "" && nodeName !== "swiper-item") {
        data["st"] = cssText;
    }
    _chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.hooks.call("modifyHydrateData", data);
    var nn = data["nn"];
    var componentAlias = componentsAlias[nn];
    if (componentAlias) {
        data["nn"] = componentAlias._num;
        for(var prop1 in data){
            if (prop1 in componentAlias) {
                data[componentAlias[prop1]] = data[prop1];
                delete data[prop1];
            }
        }
    }
    return data;
}
function combine(prefix, list, excludeSelf) {
    !excludeSelf && styleProperties.push(prefix);
    list.forEach(function(item) {
        styleProperties.push(prefix + item);
        if (prefix === WEBKIT) {
            styleProperties.push("Webkit" + item);
        }
    });
}
function recordCss(obj) {
    MutationObserver.record({
        type: "attributes",
        target: obj._element,
        attributeName: "style",
        oldValue: obj.cssText
    });
}
function enqueueUpdate(obj) {
    var element = obj._element;
    if (element._root) {
        element.enqueueUpdate({
            path: "".concat(element._path, ".", "st"),
            value: obj.cssText
        });
    }
}
function setStyle(newVal, styleKey) {
    (0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.warn)((0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.isString)(newVal) && newVal.length > PROPERTY_THRESHOLD, "Style 属性 ".concat(styleKey, " 的值数据量过大，可能会影响渲染性能，考虑使用 CSS 类或其它方案替代。"));
    var old = this[styleKey];
    if (old === newVal) return;
    !this._pending && recordCss(this);
    if ((0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.isNull)(newVal) || (0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.isUndefined)(newVal)) {
        this._usedStyleProp.delete(styleKey);
        delete this._value[styleKey];
    } else {
        this._usedStyleProp.add(styleKey);
        this._value[styleKey] = newVal;
    }
    !this._pending && enqueueUpdate(this);
}
function initStyle(ctor) {
    var _loop = function(i) {
        var styleKey = styleProperties[i];
        properties[styleKey] = {
            get: function get() {
                var val = this._value[styleKey];
                return (0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.isNull)(val) || (0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.isUndefined)(val) ? "" : val;
            },
            set: function set(newVal) {
                setStyle.call(this, newVal, styleKey);
            }
        };
    };
    var properties = {};
    for(var i = 0; i < styleProperties.length; i++)_loop(i);
    Object.defineProperties(ctor.prototype, properties);
}
function isCssVariable(propertyName) {
    return /^--/.test(propertyName);
}
function returnTrue() {
    return true;
}
function treeToArray(root, predict) {
    var array = [];
    var filter = predict !== null && predict !== void 0 ? predict : returnTrue;
    var object = root;
    while(object){
        if (object.nodeType === 1 && filter(object)) {
            array.push(object);
        }
        object = following(object, root);
    }
    return array;
}
function following(el, root) {
    var firstChild = el.firstChild;
    if (firstChild) {
        return firstChild;
    }
    var current = el;
    do {
        if (current === root) {
            return null;
        }
        var nextSibling = current.nextSibling;
        if (nextSibling) {
            return nextSibling;
        }
        current = current.parentElement;
    }while (current);
    return null;
}
function initPosition() {
    return {
        index: 0,
        column: 0,
        line: 0
    };
}
function feedPosition(position, str, len) {
    var start = position.index;
    var end = position.index = start + len;
    for(var i = start; i < end; i++){
        var char = str.charAt(i);
        if (char === "\n") {
            position.line++;
            position.column = 0;
        } else {
            position.column++;
        }
    }
}
function jumpPosition(position, str, end) {
    var len = end - position.index;
    return feedPosition(position, str, len);
}
function copyPosition(position) {
    return {
        index: position.index,
        line: position.line,
        column: position.column
    };
}
function isWhitespaceChar(char) {
    return whitespace.test(char);
}
function isEqualSignChar(char) {
    return equalSign.test(char);
}
function shouldBeIgnore(tagName) {
    var name = tagName.toLowerCase();
    if (options.html.skipElements.has(name)) {
        return true;
    }
    return false;
}
function findTextEnd(str, index) {
    while(true){
        var textEnd = str.indexOf("<", index);
        if (textEnd === -1) {
            return textEnd;
        }
        var char = str.charAt(textEnd + 1);
        if (char === "/" || char === "!" || alphanumeric.test(char)) {
            return textEnd;
        }
        index = textEnd + 1;
    }
}
function isWordEnd(cursor, wordBegin, html) {
    if (!isWhitespaceChar(html.charAt(cursor))) return false;
    var len = html.length;
    for(var i = cursor - 1; i > wordBegin; i--){
        var char = html.charAt(i);
        if (!isWhitespaceChar(char)) {
            if (isEqualSignChar(char)) return false;
            break;
        }
    }
    for(var i1 = cursor + 1; i1 < len; i1++){
        var char1 = html.charAt(i1);
        if (!isWhitespaceChar(char1)) {
            if (isEqualSignChar(char1)) return false;
            return true;
        }
    }
}
function unquote(str) {
    var car = str.charAt(0);
    var end = str.length - 1;
    var isQuoteStart = car === '"' || car === "'";
    if (isQuoteStart && car === str.charAt(end)) {
        return str.slice(1, end);
    }
    return str;
}
function getPreviousElement(el) {
    var parent = el.parentElement;
    if (!parent) return null;
    var prev = el.previousSibling;
    if (!prev) return null;
    if (prev.nodeType === 1) {
        return prev;
    } else {
        return getPreviousElement(prev);
    }
}
function sortStyles(styles) {
    return styles.sort(function(s1, s2) {
        var hundreds1 = getHundredsWeight(s1.selectorList);
        var hundreds2 = getHundredsWeight(s2.selectorList);
        if (hundreds1 !== hundreds2) return hundreds1 - hundreds2;
        var tens1 = getTensWeight(s1.selectorList);
        var tens2 = getTensWeight(s2.selectorList);
        if (tens1 !== tens2) return tens1 - tens2;
        var ones1 = getOnesWeight(s1.selectorList);
        var ones2 = getOnesWeight(s2.selectorList);
        return ones1 - ones2;
    });
}
function getHundredsWeight(selectors) {
    return selectors.reduce(function(pre, cur) {
        return pre + (cur.id ? 1 : 0);
    }, 0);
}
function getTensWeight(selectors) {
    return selectors.reduce(function(pre, cur) {
        return pre + cur.class.length + cur.attrs.length;
    }, 0);
}
function getOnesWeight(selectors) {
    return selectors.reduce(function(pre, cur) {
        return pre + (cur.tag ? 1 : 0);
    }, 0);
}
function makeMap(str, expectsLowerCase) {
    var map = /* @__PURE__ */ Object.create(null);
    var list = str.split(",");
    for(var i = 0; i < list.length; i++){
        map[list[i]] = true;
    }
    return expectsLowerCase ? function(val) {
        return !!map[val.toLowerCase()];
    } : function(val) {
        return !!map[val];
    };
}
function hasTerminalParent(tagName, stack) {
    var tagParents = closingTagAncestorBreakers[tagName];
    if (tagParents) {
        var currentIndex = stack.length - 1;
        while(currentIndex >= 0){
            var parentTagName = stack[currentIndex].tagName;
            if (parentTagName === tagName) {
                break;
            }
            if (tagParents && tagParents.includes(parentTagName)) {
                return true;
            }
            currentIndex--;
        }
    }
    return false;
}
function getTagName(tag) {
    if (options.html.renderHTMLTag) {
        return tag;
    }
    if (specialMiniElements[tag]) {
        return specialMiniElements[tag];
    } else if (isMiniElements(tag)) {
        return tag;
    } else if (isBlockElements(tag)) {
        return "view";
    } else if (isInlineElements(tag)) {
        return "text";
    }
    return "view";
}
function splitEqual(str) {
    var sep = "=";
    var idx = str.indexOf(sep);
    if (idx === -1) return [
        str
    ];
    var key = str.slice(0, idx).trim();
    var value = str.slice(idx + sep.length).trim();
    return [
        key,
        value
    ];
}
function format(children, document2, styleOptions, parent) {
    return children.filter(function(child) {
        if (child.type === "comment") {
            return false;
        } else if (child.type === "text") {
            return child.content !== "";
        }
        return true;
    }).map(function(child) {
        if (child.type === "text") {
            var text = document2.createTextNode(child.content);
            if ((0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(options.html.transformText)) {
                text = options.html.transformText(text, child);
            }
            parent === null || parent === void 0 ? void 0 : parent.appendChild(text);
            return text;
        }
        var el = document2.createElement(getTagName(child.tagName));
        el.h5tagName = child.tagName;
        parent === null || parent === void 0 ? void 0 : parent.appendChild(el);
        if (!options.html.renderHTMLTag) {
            el.className = "h5-".concat(child.tagName);
        }
        for(var i = 0; i < child.attributes.length; i++){
            var attr = child.attributes[i];
            var _splitEqual = _sliced_to_array(splitEqual(attr), 2), key = _splitEqual[0], value = _splitEqual[1];
            if (key === "class") {
                el.className += " " + unquote(value);
            } else if (key[0] === "o" && key[1] === "n") {
                continue;
            } else {
                el.setAttribute(key, value == null ? true : unquote(value));
            }
        }
        var styleTagParser = styleOptions.styleTagParser, descendantList = styleOptions.descendantList;
        var list = descendantList.slice();
        var style2 = styleTagParser.matchStyle(child.tagName, el, list);
        el.setAttribute("style", style2 + el.style.cssText);
        format(child.children, document2, {
            styleTagParser: styleTagParser,
            descendantList: list
        }, el);
        if ((0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(options.html.transformElement)) {
            return options.html.transformElement(el, child);
        }
        return el;
    });
}
function parser(html, document2) {
    var styleTagParser = new StyleTagParser();
    html = styleTagParser.extractStyle(html);
    var tokens = new Scaner(html).scan();
    var root = {
        tagName: "",
        children: [],
        type: "element",
        attributes: []
    };
    var state = {
        tokens: tokens,
        options: options,
        cursor: 0,
        stack: [
            root
        ]
    };
    parse(state);
    return format(root.children, document2, {
        styleTagParser: styleTagParser,
        descendantList: Array(styleTagParser.styles.length).fill(0)
    });
}
function parse(state) {
    var tokens = state.tokens, stack = state.stack;
    var cursor = state.cursor;
    var len = tokens.length;
    var nodes = stack[stack.length - 1].children;
    while(cursor < len){
        var token = tokens[cursor];
        if (token.type !== "tag-start") {
            nodes.push(token);
            cursor++;
            continue;
        }
        var tagToken = tokens[++cursor];
        cursor++;
        var tagName = tagToken.content.toLowerCase();
        if (token.close) {
            var index = stack.length;
            var shouldRewind = false;
            while(--index > -1){
                if (stack[index].tagName === tagName) {
                    shouldRewind = true;
                    break;
                }
            }
            while(cursor < len){
                var endToken = tokens[cursor];
                if (endToken.type !== "tag-end") break;
                cursor++;
            }
            if (shouldRewind) {
                stack.splice(index);
                break;
            } else {
                continue;
            }
        }
        var isClosingTag = options.html.closingElements.has(tagName);
        var shouldRewindToAutoClose = isClosingTag;
        if (shouldRewindToAutoClose) {
            shouldRewindToAutoClose = !hasTerminalParent(tagName, stack);
        }
        if (shouldRewindToAutoClose) {
            var currentIndex = stack.length - 1;
            while(currentIndex > 0){
                if (tagName === stack[currentIndex].tagName) {
                    stack.splice(currentIndex);
                    var previousIndex = currentIndex - 1;
                    nodes = stack[previousIndex].children;
                    break;
                }
                currentIndex = currentIndex - 1;
            }
        }
        var attributes = [];
        var attrToken = void 0;
        while(cursor < len){
            attrToken = tokens[cursor];
            if (attrToken.type === "tag-end") break;
            attributes.push(attrToken.content);
            cursor++;
        }
        cursor++;
        var children = [];
        var element = {
            type: "element",
            tagName: tagToken.content,
            attributes: attributes,
            children: children
        };
        nodes.push(element);
        var hasChildren = !(attrToken.close || options.html.voidElements.has(tagName));
        if (hasChildren) {
            stack.push({
                tagName: tagName,
                children: children
            });
            var innerState = {
                tokens: tokens,
                cursor: cursor,
                stack: stack
            };
            parse(innerState);
            cursor = innerState.cursor;
        }
    }
    state.cursor = cursor;
}
function setInnerHTML(element, html) {
    while(element.firstChild){
        element.removeChild(element.firstChild);
    }
    var children = parser(html, element.ownerDocument);
    for(var i = 0; i < children.length; i++){
        element.appendChild(children[i]);
    }
}
function getBoundingClientRectImpl() {
    var _this = this;
    if (!options.miniGlobal) return Promise.resolve(null);
    return new Promise(function(resolve) {
        var query = options.miniGlobal.createSelectorQuery();
        query.select("#".concat(_this.uid)).boundingClientRect(function(res) {
            resolve(res);
        }).exec();
    });
}
function getTemplateContent(ctx) {
    if (ctx.nodeName === "template") {
        var document2 = ctx.ownerDocument;
        var content = document2.createElement(DOCUMENT_FRAGMENT);
        content.childNodes = ctx.childNodes;
        ctx.childNodes = [
            content
        ];
        content.parentNode = ctx;
        content.childNodes.forEach(function(nodes) {
            nodes.parentNode = content;
        });
        return content;
    }
}
function insertAdjacentHTML(position, html) {
    var _a, _b;
    var parsedNodes = parser(html, this.ownerDocument);
    for(var i = 0; i < parsedNodes.length; i++){
        var n = parsedNodes[i];
        switch(position){
            case "beforebegin":
                (_a = this.parentNode) === null || _a === void 0 ? void 0 : _a.insertBefore(n, this);
                break;
            case "afterbegin":
                if (this.hasChildNodes()) {
                    this.insertBefore(n, this.childNodes[0]);
                } else {
                    this.appendChild(n);
                }
                break;
            case "beforeend":
                this.appendChild(n);
                break;
            case "afterend":
                (_b = this.parentNode) === null || _b === void 0 ? void 0 : _b.appendChild(n);
                break;
        }
    }
}
function cloneNode() {
    var isDeep = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
    var document2 = this.ownerDocument;
    var newNode;
    if (this.nodeType === 1) {
        newNode = document2.createElement(this.nodeName);
    } else if (this.nodeType === 3) {
        newNode = document2.createTextNode("");
    }
    for(var key in this){
        var value = this[key];
        if ([
            PROPS,
            DATASET
        ].includes(key) && (typeof value === "undefined" ? "undefined" : _type_of(value)) === OBJECT) {
            newNode[key] = Object.assign({}, value);
        } else if (key === "_value") {
            newNode[key] = value;
        } else if (key === STYLE) {
            newNode.style._value = Object.assign({}, value._value);
            newNode.style._usedStyleProp = new Set(Array.from(value._usedStyleProp));
        }
    }
    if (isDeep) {
        newNode.childNodes = this.childNodes.map(function(node) {
            return node.cloneNode(true);
        });
    }
    return newNode;
}
function contains(node) {
    var isContains = false;
    this.childNodes.some(function(childNode) {
        var uid = childNode.uid;
        if (uid === node.uid || uid === node.id || childNode.contains(node)) {
            isContains = true;
            return true;
        }
    });
    return isContains;
}
function createEvent(event, node) {
    if (typeof event === "string") {
        return new TaroEvent(event, {
            bubbles: true,
            cancelable: true
        });
    }
    var domEv = new TaroEvent(event.type, {
        bubbles: true,
        cancelable: true
    }, event);
    for(var key in event){
        if (key === CURRENT_TARGET || key === TARGET || key === TYPE || key === TIME_STAMP) {
            continue;
        } else {
            domEv[key] = event[key];
        }
    }
    if (domEv.type === CONFIRM && (node === null || node === void 0 ? void 0 : node.nodeName) === INPUT) {
        domEv[KEY_CODE] = 13;
    }
    return domEv;
}
function getEventCBResult(event) {
    var result = event[EVENT_CALLBACK_RESULT];
    if (!(0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.isUndefined)(result)) {
        delete event[EVENT_CALLBACK_RESULT];
    }
    return result;
}
function eventHandler(event) {
    var _a, _b;
    event.type === void 0 && Object.defineProperty(event, "type", {
        value: event._type
    });
    event.detail === void 0 && Object.defineProperty(event, "detail", {
        value: event._detail || Object.assign({}, event)
    });
    event.currentTarget = event.currentTarget || event.target || Object.assign({}, event);
    _chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.hooks.call("modifyMpEventImpl", event);
    var currentTarget = event.currentTarget;
    var id = ((_a = currentTarget.dataset) === null || _a === void 0 ? void 0 : _a.sid) || currentTarget.id || ((_b = event.detail) === null || _b === void 0 ? void 0 : _b.id) || "";
    var node = env.document.getElementById(id);
    if (node) {
        var dispatch = function() {
            var e = createEvent(event, node);
            _chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.hooks.call("modifyTaroEvent", e, node);
            node.dispatchEvent(e);
        };
        if (_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.hooks.isExist("batchedEventUpdates")) {
            var type = event.type;
            if (!_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.hooks.call("isBubbleEvents", type) || !isParentBinded(node, type) || type === TOUCHMOVE && !!node.props.catchMove) {
                _chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.hooks.call("batchedEventUpdates", function() {
                    if (eventsBatch[type]) {
                        eventsBatch[type].forEach(function(fn) {
                            return fn();
                        });
                        delete eventsBatch[type];
                    }
                    dispatch();
                });
                return getEventCBResult(event);
            } else {
                (eventsBatch[type] || (eventsBatch[type] = [])).push(dispatch);
            }
        } else {
            dispatch();
            return getEventCBResult(event);
        }
    }
}
function findCustomWrapper(root, dataPathArr) {
    var list = dataPathArr.slice(1);
    var currentData = root;
    var customWrapper;
    var splitedPath = "";
    list.some(function(item, i) {
        var key = item.replace(/^\[(.+)\]$/, "$1").replace(/\bcn\b/g, "childNodes");
        currentData = currentData[key];
        if ((0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.isArray)(currentData)) {
            currentData = currentData.filter(function(el) {
                return !isComment(el);
            });
        }
        if ((0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.isUndefined)(currentData)) return true;
        if (currentData.nodeName === CUSTOM_WRAPPER) {
            var res = customWrapperCache.get(currentData.sid);
            if (res) {
                customWrapper = res;
                splitedPath = dataPathArr.slice(i + 2).join(".");
            }
        }
    });
    if (customWrapper) {
        return {
            customWrapper: customWrapper,
            splitedPath: splitedPath
        };
    }
}
function __classPrivateFieldGet(receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}
function __classPrivateFieldSet(receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
}
function replacer(match) {
    return replaceCharMap[match];
}
function appendTo(dict, name, value) {
    var res = (0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.isArray)(value) ? value.join(",") : value;
    if (name in dict) dict[name].push(res);
    else dict[name] = [
        res
    ];
}
function addEach(value, key) {
    appendTo(this, key, value);
}
function decode(str) {
    return decodeURIComponent(str.replace(plusReg, " "));
}
function encode(str) {
    return encodeURIComponent(str).replace(findReg, replacer);
}
function parseUrl() {
    var url = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
    var result = {
        href: "",
        origin: "",
        protocol: "",
        hostname: "",
        host: "",
        port: "",
        pathname: "",
        search: "",
        hash: ""
    };
    if (!url || !(0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.isString)(url)) return result;
    url = url.trim();
    var PATTERN = /^(([^:/?#]+):)?\/\/(([^/?#]+):(.+)@)?([^/?#:]*)(:(\d+))?([^?#]*)(\?([^#]*))?(#(.*))?/;
    var matches = url.match(PATTERN);
    if (!matches) return result;
    result.protocol = matches[1] || "https:";
    result.hostname = matches[6] || "taro.com";
    result.port = matches[8] || "";
    result.pathname = matches[9] || "/";
    result.search = matches[10] || "";
    result.hash = matches[12] || "";
    result.href = url;
    result.origin = result.protocol + "//" + result.hostname;
    result.host = result.hostname + (result.port ? ":".concat(result.port) : "");
    return result;
}
function parseUrlBase(url, base) {
    var VALID_URL = /^(https?:)\/\//i;
    var fullUrl = "";
    var parsedBase = null;
    if (!(0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.isUndefined)(base)) {
        base = String(base).trim();
        if (!VALID_URL.test(base)) throw new TypeError("Failed to construct 'URL': Invalid base URL");
        parsedBase = parseUrl(base);
    }
    url = String(url).trim();
    if (VALID_URL.test(url)) {
        fullUrl = url;
    } else if (parsedBase) {
        if (url) {
            if (url.startsWith("//")) {
                fullUrl = parsedBase.protocol + url;
            } else {
                fullUrl = parsedBase.origin + (url.startsWith("/") ? url : "/".concat(url));
            }
        } else {
            fullUrl = parsedBase.href;
        }
    } else {
        throw new TypeError("Failed to construct 'URL': Invalid URL");
    }
    return parseUrl(fullUrl);
}
function getComputedStyle(element) {
    return element.style;
}
function generateFullUrl() {
    var val = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
    var origin = INIT_URL;
    if (/^[/?#]/.test(val)) {
        return origin + val;
    }
    return val;
}
function injectPageInstance(inst, id) {
    _chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.hooks.call("mergePageInstance", instances.get(id), inst);
    instances.set(id, inst);
}
function getPageInstance(id) {
    return instances.get(id);
}
function removePageInstance(id) {
    instances.delete(id);
}
function addLeadingSlash(path) {
    if (path == null) {
        return "";
    }
    return path.charAt(0) === "/" ? path : "/" + path;
}
function safeExecute(path, lifecycle) {
    for(var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++){
        args[_key - 2] = arguments[_key];
    }
    var instance = instances.get(path);
    if (instance == null) {
        return;
    }
    var func = _chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.hooks.call("getLifecycle", instance, lifecycle);
    if ((0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.isArray)(func)) {
        var res = func.map(function(fn) {
            return fn.apply(instance, args);
        });
        return res[0];
    }
    if (!(0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(func)) {
        return;
    }
    return func.apply(instance, args);
}
function stringify(obj) {
    if (obj == null) {
        return "";
    }
    var path = Object.keys(obj).map(function(key) {
        return key + "=" + obj[key];
    }).join("&");
    return path === "" ? path : "?" + path;
}
function getPath(id, options2) {
    var idx = id.indexOf("?");
    if (isWeb) {
        return "".concat(idx > -1 ? id.substring(0, idx) : id).concat(stringify((options2 === null || options2 === void 0 ? void 0 : options2.stamp) ? {
            stamp: options2.stamp
        } : {}));
    } else {
        return "".concat(idx > -1 ? id.substring(0, idx) : id).concat(stringify(options2));
    }
}
function getOnReadyEventKey(path) {
    return path + "." + ON_READY;
}
function getOnShowEventKey(path) {
    return path + "." + ON_SHOW;
}
function getOnHideEventKey(path) {
    return path + "." + ON_HIDE;
}
function createPageConfig(component, pageName, data, pageConfig) {
    var id = pageName !== null && pageName !== void 0 ? pageName : "taro_page_".concat(pageId());
    var _hooks_call_page = _sliced_to_array(_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.hooks.call("getMiniLifecycleImpl").page, 7), ONLOAD = _hooks_call_page[0], ONUNLOAD = _hooks_call_page[1], ONREADY = _hooks_call_page[2], ONSHOW = _hooks_call_page[3], ONHIDE = _hooks_call_page[4], LIFECYCLES = _hooks_call_page[5], SIDE_EFFECT_LIFECYCLES = _hooks_call_page[6];
    var pageElement = null;
    var unmounting = false;
    var prepareMountList = [];
    function setCurrentRouter(page) {
        var router = isWeb ? page.$taroPath : page.route || page.__route__ || page.$taroPath;
        Current.router = {
            params: page.$taroParams,
            path: addLeadingSlash(router),
            $taroPath: page.$taroPath,
            onReady: getOnReadyEventKey(id),
            onShow: getOnShowEventKey(id),
            onHide: getOnHideEventKey(id)
        };
        if (!(0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.isUndefined)(page.exitState)) {
            Current.router.exitState = page.exitState;
        }
    }
    var loadResolver;
    var hasLoaded;
    var _obj;
    var config = (_obj = {}, _define_property(_obj, ONLOAD, function() {
        var options2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, cb = arguments.length > 1 ? arguments[1] : void 0;
        var _this = this;
        hasLoaded = new Promise(function(resolve) {
            loadResolver = resolve;
        });
        perf.start(PAGE_INIT);
        Current.page = this;
        this.config = pageConfig || {};
        var uniqueOptions = Object.assign({}, options2, {
            $taroTimestamp: Date.now()
        });
        var $taroPath = this.$taroPath = getPath(id, uniqueOptions);
        if (isWeb) {
            config.path = $taroPath;
        }
        if (this.$taroParams == null) {
            this.$taroParams = uniqueOptions;
        }
        setCurrentRouter(this);
        if (!isWeb) {
            window$1.trigger(CONTEXT_ACTIONS.INIT, $taroPath);
        }
        var mount = function() {
            Current.app.mount(component, $taroPath, function() {
                pageElement = env.document.getElementById($taroPath);
                (0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.ensure)(pageElement !== null, "没有找到页面实例。");
                safeExecute($taroPath, ON_LOAD, _this.$taroParams);
                loadResolver();
                if (!isWeb) {
                    pageElement.ctx = _this;
                    pageElement.performUpdate(true, cb);
                } else {
                    (0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(cb) && cb();
                }
            });
        };
        if (unmounting) {
            prepareMountList.push(mount);
        } else {
            mount();
        }
    }), _define_property(_obj, ONUNLOAD, function() {
        var $taroPath = this.$taroPath;
        if (!isWeb) {
            window$1.trigger(CONTEXT_ACTIONS.DESTORY, $taroPath);
        }
        safeExecute($taroPath, ONUNLOAD);
        unmounting = true;
        Current.app.unmount($taroPath, function() {
            unmounting = false;
            instances.delete($taroPath);
            if (pageElement) {
                pageElement.ctx = null;
                pageElement = null;
            }
            if (prepareMountList.length) {
                prepareMountList.forEach(function(fn) {
                    return fn();
                });
                prepareMountList = [];
            }
        });
    }), _define_property(_obj, ONREADY, function() {
        var _this = this;
        hasLoaded.then(function() {
            safeExecute(_this.$taroPath, ON_READY);
            _raf(function() {
                return eventCenter.trigger(getOnReadyEventKey(id));
            });
            _this.onReady.called = true;
        });
    }), _define_property(_obj, ONSHOW, function() {
        var options2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        var _this = this;
        hasLoaded.then(function() {
            Current.page = _this;
            setCurrentRouter(_this);
            if (!isWeb) {
                window$1.trigger(CONTEXT_ACTIONS.RECOVER, _this.$taroPath);
            }
            safeExecute(_this.$taroPath, ON_SHOW, options2);
            _raf(function() {
                return eventCenter.trigger(getOnShowEventKey(id));
            });
        });
    }), _define_property(_obj, ONHIDE, function() {
        if (!isWeb) {
            window$1.trigger(CONTEXT_ACTIONS.RESTORE, this.$taroPath);
        }
        if (Current.page === this) {
            Current.page = null;
            Current.router = null;
        }
        safeExecute(this.$taroPath, ON_HIDE);
        eventCenter.trigger(getOnHideEventKey(id));
    }), _obj);
    LIFECYCLES.forEach(function(lifecycle) {
        config[lifecycle] = function() {
            return safeExecute.apply(void 0, [
                this.$taroPath,
                lifecycle
            ].concat(Array.prototype.slice.call(arguments)));
        };
    });
    SIDE_EFFECT_LIFECYCLES.forEach(function(lifecycle) {
        var _a;
        if (component[lifecycle] || ((_a = component.prototype) === null || _a === void 0 ? void 0 : _a[lifecycle]) || component[lifecycle.replace(/^on/, "enable")]) {
            config[lifecycle] = function() {
                for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
                    args[_key] = arguments[_key];
                }
                var _a2;
                var target = (_a2 = args[0]) === null || _a2 === void 0 ? void 0 : _a2.target;
                if (target === null || target === void 0 ? void 0 : target.id) {
                    var id2 = target.id;
                    var element = env.document.getElementById(id2);
                    if (element) {
                        target.dataset = element.dataset;
                    }
                }
                return safeExecute.apply(void 0, [
                    this.$taroPath,
                    lifecycle
                ].concat(_to_consumable_array(args)));
            };
        }
    });
    config.eh = eventHandler;
    if (!(0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.isUndefined)(data)) {
        config.data = data;
    }
    _chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.hooks.call("modifyPageObject", config);
    return config;
}
function createComponentConfig(component, componentName, data) {
    var id = componentName !== null && componentName !== void 0 ? componentName : "taro_component_".concat(pageId());
    var componentElement = null;
    var _hooks_call_component = _sliced_to_array(_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.hooks.call("getMiniLifecycleImpl").component, 2), ATTACHED = _hooks_call_component[0], DETACHED = _hooks_call_component[1];
    var _obj;
    var config = (_obj = {}, _define_property(_obj, ATTACHED, function() {
        var _this = this;
        var _a;
        perf.start(PAGE_INIT);
        var path = getPath(id, {
            id: ((_a = this.getPageId) === null || _a === void 0 ? void 0 : _a.call(this)) || pageId()
        });
        Current.app.mount(component, path, function() {
            componentElement = env.document.getElementById(path);
            (0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.ensure)(componentElement !== null, "没有找到组件实例。");
            _this.$taroInstances = instances.get(path);
            safeExecute(path, ON_LOAD);
            if (!isWeb) {
                componentElement.ctx = _this;
                componentElement.performUpdate(true);
            }
        });
    }), _define_property(_obj, DETACHED, function() {
        var path = getPath(id, {
            id: this.getPageId()
        });
        Current.app.unmount(path, function() {
            instances.delete(path);
            if (componentElement) {
                componentElement.ctx = null;
            }
        });
    }), _define_property(_obj, "methods", {
        eh: eventHandler
    }), _obj);
    if (!(0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.isUndefined)(data)) {
        config.data = data;
    }
    [
        OPTIONS,
        EXTERNAL_CLASSES,
        BEHAVIORS
    ].forEach(function(key) {
        var _a;
        config[key] = (_a = component[key]) !== null && _a !== void 0 ? _a : _chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.EMPTY_OBJ;
    });
    return config;
}
function createRecursiveComponentConfig(componentName) {
    var isCustomWrapper = componentName === CUSTOM_WRAPPER;
    var _hooks_call_component = _sliced_to_array(_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.hooks.call("getMiniLifecycleImpl").component, 2), ATTACHED = _hooks_call_component[0], DETACHED = _hooks_call_component[1];
    var _obj;
    var lifeCycles = isCustomWrapper ? (_obj = {}, _define_property(_obj, ATTACHED, function() {
        var _a, _b;
        var componentId = ((_a = this.data.i) === null || _a === void 0 ? void 0 : _a.sid) || ((_b = this.props.i) === null || _b === void 0 ? void 0 : _b.sid);
        if ((0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.isString)(componentId)) {
            customWrapperCache.set(componentId, this);
            var el = env.document.getElementById(componentId);
            if (el) {
                el.ctx = this;
            }
        }
    }), _define_property(_obj, DETACHED, function() {
        var _a, _b;
        var componentId = ((_a = this.data.i) === null || _a === void 0 ? void 0 : _a.sid) || ((_b = this.props.i) === null || _b === void 0 ? void 0 : _b.sid);
        if ((0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.isString)(componentId)) {
            customWrapperCache.delete(componentId);
            var el = env.document.getElementById(componentId);
            if (el) {
                el.ctx = null;
            }
        }
    }), _obj) : _chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.EMPTY_OBJ;
    return Object.assign({
        properties: {
            i: {
                type: Object,
                value: _define_property({}, "nn", (0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.getComponentsAlias)(_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.internalComponents)[VIEW]._num)
            },
            l: {
                type: String,
                value: ""
            }
        },
        options: {
            addGlobalClass: true,
            virtualHost: !isCustomWrapper
        },
        methods: {
            eh: eventHandler
        }
    }, lifeCycles);
}
var PROPERTY_THRESHOLD, SET_DATA, PAGE_INIT, ROOT_STR, HTML, HEAD, BODY, APP, CONTAINER, DOCUMENT_ELEMENT_NAME, DOCUMENT_FRAGMENT, ID, UID, CLASS, STYLE, FOCUS, VIEW, STATIC_VIEW, PURE_VIEW, PROPS, DATASET, OBJECT, VALUE, INPUT, CHANGE, CUSTOM_WRAPPER, TARGET, CURRENT_TARGET, TYPE, CONFIRM, TIME_STAMP, KEY_CODE, TOUCHMOVE, CATCHMOVE, CATCH_VIEW, COMMENT, ON_LOAD, ON_READY, ON_SHOW, ON_HIDE, OPTIONS, EXTERNAL_CLASSES, EVENT_CALLBACK_RESULT, BEHAVIORS, A, CONTEXT_ACTIONS, observers, MutationObserverImpl, sidMatches, isConcerned, pendingMuatations, MutationObserver, incrementId, customWrapperCache, componentsAlias$1, ClassList, EventSource, eventSource, isWeb$1, env, SPECIAL_NODES, componentsAlias, TaroEventTarget, CHILDNODES, nodeId, TaroNode, WEBKIT, styleProperties, color, style, width, image, size, color_style_width, fitlength_fitwidth_image, fitlength_fitwidth_image_radius, color_style_width_fitlength_fitwidth_image, endRadius_startRadius, bottom_left_right_top, end_start, content_items_self, blockSize_height_inlineSize_width, after_before, Style, TaroElement, options, whitespace, equalSign, alphanumeric, Scaner, LEFT_BRACKET, RIGHT_BRACKET, CLASS_SELECTOR, ID_SELECTOR, CHILD_COMBINATOR, GENERAL_SIBLING_COMBINATOR, ADJACENT_SIBLING_COMBINATOR, StyleTagParser, specialMiniElements, internalCompsList, isMiniElements, isInlineElements, isBlockElements, closingTagAncestorBreakers, TaroEvent, eventsBatch, FormElement, Performance, perf, TaroRootElement, TaroText, _URLSearchParams_dict, findReg, plusReg, replaceCharMap, URLSearchParams, _URL_hash, _URL_hostname, _URL_pathname, _URL_port, _URL_protocol, _URL_search, URL, AnchorElement, CustomWrapperElement, TaroDocument, document$1, eventCenter, RuntimeCache, _History_instances, _History_location, _History_stack, _History_cur, _History_window, _History_reset, cache$1, History, Current, getCurrentInstance, _Location_instances, _Location_url, _Location_noCheckUrl, _Location_window, _Location_reset, _Location_getPreValue, _Location_rollBack, _Location_recordHistory, _Location_checkUrlChange, INIT_URL, cache, Location, machine, arch, engine, msg, nav, now, lastTime, _raf, _caf, window$1, location, history, SVGElement, instances, pageId, isWeb, nextTick;
var init_runtime_esm = (0,_chunk_P7VEE7PG_js__WEBPACK_IMPORTED_MODULE_1__.__esm)({
    "node_modules/@tarojs/runtime/dist/runtime.esm.js": function() {
        (0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.init_shared_esm)();
        (0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.init_shared_esm)();
        PROPERTY_THRESHOLD = 2046;
        SET_DATA = "小程序 setData";
        PAGE_INIT = "页面初始化";
        ROOT_STR = "root";
        HTML = "html";
        HEAD = "head";
        BODY = "body";
        APP = "app";
        CONTAINER = "container";
        DOCUMENT_ELEMENT_NAME = "#document";
        DOCUMENT_FRAGMENT = "document-fragment";
        ID = "id";
        UID = "uid";
        CLASS = "class";
        STYLE = "style";
        FOCUS = "focus";
        VIEW = "view";
        STATIC_VIEW = "static-view";
        PURE_VIEW = "pure-view";
        PROPS = "props";
        DATASET = "dataset";
        OBJECT = "object";
        VALUE = "value";
        INPUT = "input";
        CHANGE = "change";
        CUSTOM_WRAPPER = "custom-wrapper";
        TARGET = "target";
        CURRENT_TARGET = "currentTarget";
        TYPE = "type";
        CONFIRM = "confirm";
        TIME_STAMP = "timeStamp";
        KEY_CODE = "keyCode";
        TOUCHMOVE = "touchmove";
        CATCHMOVE = "catchMove";
        CATCH_VIEW = "catch-view";
        COMMENT = "comment";
        ON_LOAD = "onLoad";
        ON_READY = "onReady";
        ON_SHOW = "onShow";
        ON_HIDE = "onHide";
        OPTIONS = "options";
        EXTERNAL_CLASSES = "externalClasses";
        EVENT_CALLBACK_RESULT = "e_result";
        BEHAVIORS = "behaviors";
        A = "a";
        (function(CONTEXT_ACTIONS2) {
            CONTEXT_ACTIONS2["INIT"] = "0";
            CONTEXT_ACTIONS2["RESTORE"] = "1";
            CONTEXT_ACTIONS2["RECOVER"] = "2";
            CONTEXT_ACTIONS2["DESTORY"] = "3";
        })(CONTEXT_ACTIONS || (CONTEXT_ACTIONS = {}));
        observers = [];
        MutationObserverImpl = /*#__PURE__*/ function() {
            "use strict";
            function MutationObserverImpl(callback) {
                _class_call_check(this, MutationObserverImpl);
                this.records = [];
                this.callback = callback;
            }
            _create_class(MutationObserverImpl, [
                {
                    key: "observe",
                    value: function observe(target, options2) {
                        this.disconnect();
                        this.target = target;
                        this.options = options2 || {};
                        observers.push(this);
                    }
                },
                {
                    key: "disconnect",
                    value: function disconnect() {
                        this.target = null;
                        var index = observers.indexOf(this);
                        if (index >= 0) {
                            observers.splice(index, 1);
                        }
                    }
                },
                {
                    key: "takeRecords",
                    value: function takeRecords() {
                        return this.records.splice(0, this.records.length);
                    }
                }
            ]);
            return MutationObserverImpl;
        }();
        sidMatches = function(observerTarget, target) {
            return !!observerTarget && observerTarget.sid === (target === null || target === void 0 ? void 0 : target.sid);
        };
        isConcerned = function(record, options2) {
            var characterData = options2.characterData, characterDataOldValue = options2.characterDataOldValue, attributes = options2.attributes, attributeOldValue = options2.attributeOldValue, childList = options2.childList;
            switch(record.type){
                case "characterData":
                    if (characterData) {
                        if (!characterDataOldValue) record.oldValue = null;
                        return true;
                    }
                    return false;
                case "attributes":
                    if (attributes) {
                        if (!attributeOldValue) record.oldValue = null;
                        return true;
                    }
                    return false;
                case "childList":
                    if (childList) {
                        return true;
                    }
                    return false;
            }
        };
        pendingMuatations = false;
        MutationObserver = /*#__PURE__*/ function() {
            "use strict";
            function MutationObserver(callback) {
                _class_call_check(this, MutationObserver);
                if (false) {} else {
                    if (true) {
                        console.warn("[Taro Warning] 若要使用 MutationObserver，请在 Taro 编译配置中设置 'mini.enableMutationObserver: true'");
                    }
                    this.core = {
                        observe: _chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.noop,
                        disconnect: _chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.noop,
                        takeRecords: _chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.noop
                    };
                }
            }
            _create_class(MutationObserver, [
                {
                    key: "observe",
                    value: function observe() {
                        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
                            args[_key] = arguments[_key];
                        }
                        var _this_core;
                        (_this_core = this.core).observe.apply(_this_core, _to_consumable_array(args));
                    }
                },
                {
                    key: "disconnect",
                    value: function disconnect() {
                        this.core.disconnect();
                    }
                },
                {
                    key: "takeRecords",
                    value: function takeRecords() {
                        return this.core.takeRecords();
                    }
                }
            ], [
                {
                    key: "record",
                    value: function record(record) {
                        recordMutation(record);
                    }
                }
            ]);
            return MutationObserver;
        }();
        incrementId = function() {
            var chatCodes = [];
            for(var i = 65; i <= 90; i++){
                chatCodes.push(i);
            }
            for(var i1 = 97; i1 <= 122; i1++){
                chatCodes.push(i1);
            }
            var chatCodesLen = chatCodes.length - 1;
            var list = [
                0,
                0
            ];
            return function() {
                var _String;
                var target = list.map(function(item) {
                    return chatCodes[item];
                });
                var res = (_String = String).fromCharCode.apply(_String, _to_consumable_array(target));
                var tailIdx = list.length - 1;
                list[tailIdx]++;
                while(list[tailIdx] > chatCodesLen){
                    list[tailIdx] = 0;
                    tailIdx = tailIdx - 1;
                    if (tailIdx < 0) {
                        list.push(0);
                        break;
                    }
                    list[tailIdx]++;
                }
                return res;
            };
        };
        customWrapperCache = /* @__PURE__ */ new Map();
        ClassList = /*#__PURE__*/ function(Set1) {
            "use strict";
            _inherits(ClassList, Set1);
            var _super = _create_super(ClassList);
            function ClassList(className, el) {
                _class_call_check(this, ClassList);
                var _this;
                _this = _super.call(this);
                className.trim().split(/\s+/).forEach(_get((_assert_this_initialized(_this), _get_prototype_of(ClassList.prototype)), "add", _this).bind(_assert_this_initialized(_this)));
                _this.el = el;
                return _this;
            }
            _create_class(ClassList, [
                {
                    key: "value",
                    get: function get() {
                        return _to_consumable_array(this).filter(function(v) {
                            return v !== "";
                        }).join(" ");
                    }
                },
                {
                    key: "add",
                    value: function add(s) {
                        _get(_get_prototype_of(ClassList.prototype), "add", this).call(this, s);
                        this._update();
                        return this;
                    }
                },
                {
                    key: "length",
                    get: function get() {
                        return this.size;
                    }
                },
                {
                    key: "remove",
                    value: function remove(s) {
                        _get(_get_prototype_of(ClassList.prototype), "delete", this).call(this, s);
                        this._update();
                    }
                },
                {
                    key: "toggle",
                    value: function toggle(s) {
                        if (_get(_get_prototype_of(ClassList.prototype), "has", this).call(this, s)) {
                            _get(_get_prototype_of(ClassList.prototype), "delete", this).call(this, s);
                        } else {
                            _get(_get_prototype_of(ClassList.prototype), "add", this).call(this, s);
                        }
                        this._update();
                    }
                },
                {
                    key: "replace",
                    value: function replace(s1, s2) {
                        _get(_get_prototype_of(ClassList.prototype), "delete", this).call(this, s1);
                        _get(_get_prototype_of(ClassList.prototype), "add", this).call(this, s2);
                        this._update();
                    }
                },
                {
                    key: "contains",
                    value: function contains(s) {
                        return _get(_get_prototype_of(ClassList.prototype), "has", this).call(this, s);
                    }
                },
                {
                    key: "toString",
                    value: function toString() {
                        return this.value;
                    }
                },
                {
                    key: "_update",
                    value: function _update() {
                        this.el.className = this.value;
                    }
                }
            ]);
            return ClassList;
        }(_wrap_native_super(Set));
        EventSource = /*#__PURE__*/ function(Map1) {
            "use strict";
            _inherits(EventSource, Map1);
            var _super = _create_super(EventSource);
            function EventSource() {
                _class_call_check(this, EventSource);
                return _super.apply(this, arguments);
            }
            _create_class(EventSource, [
                {
                    key: "removeNode",
                    value: function removeNode(child) {
                        var sid = child.sid, uid = child.uid;
                        this.delete(sid);
                        if (uid !== sid && uid) this.delete(uid);
                    }
                },
                {
                    key: "removeNodeTree",
                    value: function removeNodeTree(child) {
                        var _this = this;
                        this.removeNode(child);
                        var childNodes = child.childNodes;
                        childNodes.forEach(function(node) {
                            return _this.removeNodeTree(node);
                        });
                    }
                }
            ]);
            return EventSource;
        }(_wrap_native_super(Map));
        eventSource = new EventSource();
        isWeb$1 = (0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.isWebPlatform)();
        env = {
            window: isWeb$1 ? window : _chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.EMPTY_OBJ,
            document: isWeb$1 ? document : _chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.EMPTY_OBJ
        };
        TaroEventTarget = /*#__PURE__*/ function() {
            "use strict";
            function TaroEventTarget() {
                _class_call_check(this, TaroEventTarget);
                this.__handlers = {};
            }
            _create_class(TaroEventTarget, [
                {
                    key: "addEventListener",
                    value: function addEventListener(type, handler, options2) {
                        type = type.toLowerCase();
                        _chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.hooks.call("onAddEvent", type, handler, options2, this);
                        if (type === "regionchange") {
                            this.addEventListener("begin", handler, options2);
                            this.addEventListener("end", handler, options2);
                            return;
                        }
                        var isCapture = Boolean(options2);
                        var isOnce = false;
                        if ((0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.isObject)(options2)) {
                            isCapture = Boolean(options2.capture);
                            isOnce = Boolean(options2.once);
                        }
                        if (isOnce) {
                            var wrapper = function wrapper1() {
                                handler.apply(this, arguments);
                                this.removeEventListener(type, wrapper);
                            };
                            this.addEventListener(type, wrapper, Object.assign(Object.assign({}, options2), {
                                once: false
                            }));
                            return;
                        }
                        (0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.warn)(isCapture, "Taro 暂未实现 event 的 capture 特性。");
                        var oldHandler = handler;
                        handler = function handler() {
                            return oldHandler.apply(this, arguments);
                        };
                        handler.oldHandler = oldHandler;
                        var handlers = this.__handlers[type];
                        if ((0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.isArray)(handlers)) {
                            handlers.push(handler);
                        } else {
                            this.__handlers[type] = [
                                handler
                            ];
                        }
                    }
                },
                {
                    key: "removeEventListener",
                    value: function removeEventListener(type, handler) {
                        type = type.toLowerCase();
                        if (type === "regionchange") {
                            this.removeEventListener("begin", handler);
                            this.removeEventListener("end", handler);
                            return;
                        }
                        if (!handler) {
                            return;
                        }
                        var handlers = this.__handlers[type];
                        if (!(0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.isArray)(handlers)) {
                            return;
                        }
                        var index = handlers.findIndex(function(item) {
                            if (item === handler || item.oldHandler === handler) return true;
                        });
                        (0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.warn)(index === -1, "事件: '".concat(type, "' 没有注册在 DOM 中，因此不会被移除。"));
                        handlers.splice(index, 1);
                    }
                },
                {
                    key: "isAnyEventBinded",
                    value: function isAnyEventBinded() {
                        var handlers = this.__handlers;
                        var isAnyEventBinded = Object.keys(handlers).find(function(key) {
                            return handlers[key].length;
                        });
                        return Boolean(isAnyEventBinded);
                    }
                }
            ]);
            return TaroEventTarget;
        }();
        CHILDNODES = "cn";
        nodeId = incrementId();
        TaroNode = /*#__PURE__*/ function(TaroEventTarget) {
            "use strict";
            _inherits(TaroNode1, TaroEventTarget);
            var _super = _create_super(TaroNode1);
            function TaroNode1() {
                _class_call_check(this, TaroNode1);
                var _this;
                _this = _super.call(this);
                _this.parentNode = null;
                _this.childNodes = [];
                _this.hydrate = function(node) {
                    return function() {
                        return hydrate(node);
                    };
                };
                _this.uid = "_" + nodeId();
                _this.sid = _this.uid;
                eventSource.set(_this.sid, _assert_this_initialized(_this));
                return _this;
            }
            _create_class(TaroNode1, [
                {
                    key: "updateChildNodes",
                    value: function updateChildNodes(isClean) {
                        var _this = this;
                        var cleanChildNodes = function() {
                            return [];
                        };
                        var rerenderChildNodes = function() {
                            var childNodes = _this.childNodes.filter(function(node) {
                                return !isComment(node);
                            });
                            return childNodes.map(hydrate);
                        };
                        this.enqueueUpdate({
                            path: "".concat(this._path, ".").concat(CHILDNODES),
                            value: isClean ? cleanChildNodes : rerenderChildNodes
                        });
                    }
                },
                {
                    key: "_root",
                    get: function get() {
                        var _a;
                        return ((_a = this.parentNode) === null || _a === void 0 ? void 0 : _a._root) || null;
                    }
                },
                {
                    key: "findIndex",
                    value: function findIndex(refChild) {
                        var index = this.childNodes.indexOf(refChild);
                        (0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.ensure)(index !== -1, "The node to be replaced is not a child of this node.");
                        return index;
                    }
                },
                {
                    key: "_path",
                    get: function get() {
                        var parentNode = this.parentNode;
                        if (parentNode) {
                            var list = parentNode.childNodes.filter(function(node) {
                                return !isComment(node);
                            });
                            var indexOfNode = list.indexOf(this);
                            var index = _chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.hooks.call("getPathIndex", indexOfNode);
                            return "".concat(parentNode._path, ".").concat(CHILDNODES, ".").concat(index);
                        }
                        return "";
                    }
                },
                {
                    key: "nextSibling",
                    get: function get() {
                        var parentNode = this.parentNode;
                        return (parentNode === null || parentNode === void 0 ? void 0 : parentNode.childNodes[parentNode.findIndex(this) + 1]) || null;
                    }
                },
                {
                    key: "previousSibling",
                    get: function get() {
                        var parentNode = this.parentNode;
                        return (parentNode === null || parentNode === void 0 ? void 0 : parentNode.childNodes[parentNode.findIndex(this) - 1]) || null;
                    }
                },
                {
                    key: "parentElement",
                    get: function get() {
                        var parentNode = this.parentNode;
                        if ((parentNode === null || parentNode === void 0 ? void 0 : parentNode.nodeType) === 1) {
                            return parentNode;
                        }
                        return null;
                    }
                },
                {
                    key: "firstChild",
                    get: function get() {
                        return this.childNodes[0] || null;
                    }
                },
                {
                    key: "lastChild",
                    get: function get() {
                        var childNodes = this.childNodes;
                        return childNodes[childNodes.length - 1] || null;
                    }
                },
                {
                    key: "textContent",
                    set: function set(text) {
                        var removedNodes = this.childNodes.slice();
                        var addedNodes = [];
                        while(this.firstChild){
                            this.removeChild(this.firstChild, {
                                doUpdate: false
                            });
                        }
                        if (text === "") {
                            this.updateChildNodes(true);
                        } else {
                            var newText = env.document.createTextNode(text);
                            addedNodes.push(newText);
                            this.appendChild(newText);
                            this.updateChildNodes();
                        }
                        MutationObserver.record({
                            type: "childList",
                            target: this,
                            removedNodes: removedNodes,
                            addedNodes: addedNodes
                        });
                    }
                },
                {
                    key: "insertBefore",
                    value: function insertBefore(newChild, refChild, isReplace) {
                        var _this = this;
                        if (newChild.nodeName === DOCUMENT_FRAGMENT) {
                            newChild.childNodes.reduceRight(function(previousValue, currentValue) {
                                _this.insertBefore(currentValue, previousValue);
                                return currentValue;
                            }, refChild);
                            return newChild;
                        }
                        newChild.remove({
                            cleanRef: false
                        });
                        newChild.parentNode = this;
                        if (refChild) {
                            var index = this.findIndex(refChild);
                            this.childNodes.splice(index, 0, newChild);
                        } else {
                            this.childNodes.push(newChild);
                        }
                        if (this._root) {
                            if (!refChild) {
                                var isOnlyChild = this.childNodes.length === 1;
                                if (isOnlyChild) {
                                    this.updateChildNodes();
                                } else {
                                    this.enqueueUpdate({
                                        path: newChild._path,
                                        value: this.hydrate(newChild)
                                    });
                                }
                            } else if (isReplace) {
                                this.enqueueUpdate({
                                    path: newChild._path,
                                    value: this.hydrate(newChild)
                                });
                            } else {
                                this.updateChildNodes();
                            }
                        }
                        MutationObserver.record({
                            type: "childList",
                            target: this,
                            addedNodes: [
                                newChild
                            ],
                            removedNodes: isReplace ? [
                                refChild
                            ] : [],
                            nextSibling: isReplace ? refChild.nextSibling : refChild || null,
                            previousSibling: newChild.previousSibling
                        });
                        return newChild;
                    }
                },
                {
                    key: "appendChild",
                    value: function appendChild(newChild) {
                        return this.insertBefore(newChild);
                    }
                },
                {
                    key: "replaceChild",
                    value: function replaceChild(newChild, oldChild) {
                        if (oldChild.parentNode !== this) return;
                        this.insertBefore(newChild, oldChild, true);
                        oldChild.remove({
                            doUpdate: false
                        });
                        return oldChild;
                    }
                },
                {
                    key: "removeChild",
                    value: function removeChild(child) {
                        var options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
                        var cleanRef = options2.cleanRef, doUpdate = options2.doUpdate;
                        if (cleanRef !== false && doUpdate !== false) {
                            MutationObserver.record({
                                type: "childList",
                                target: this,
                                removedNodes: [
                                    child
                                ],
                                nextSibling: child.nextSibling,
                                previousSibling: child.previousSibling
                            });
                        }
                        var index = this.findIndex(child);
                        this.childNodes.splice(index, 1);
                        child.parentNode = null;
                        if (cleanRef !== false) {
                            eventSource.removeNodeTree(child);
                        }
                        if (this._root && doUpdate !== false) {
                            this.updateChildNodes();
                        }
                        return child;
                    }
                },
                {
                    key: "remove",
                    value: function remove(options2) {
                        var _a;
                        (_a = this.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(this, options2);
                    }
                },
                {
                    key: "hasChildNodes",
                    value: function hasChildNodes() {
                        return this.childNodes.length > 0;
                    }
                },
                {
                    key: "enqueueUpdate",
                    value: function enqueueUpdate(payload) {
                        var _a;
                        (_a = this._root) === null || _a === void 0 ? void 0 : _a.enqueueUpdate(payload);
                    }
                },
                {
                    key: "ownerDocument",
                    get: function get() {
                        return env.document;
                    }
                }
            ], [
                {
                    key: "extend",
                    value: function extend1(methodName, options2) {
                        extend(TaroNode, methodName, options2);
                    }
                }
            ]);
            return TaroNode1;
        }(TaroEventTarget);
        WEBKIT = "webkit";
        styleProperties = [
            "all",
            "appearance",
            "blockOverflow",
            "blockSize",
            "bottom",
            "clear",
            "contain",
            "content",
            "continue",
            "cursor",
            "direction",
            "display",
            "filter",
            "float",
            "gap",
            "height",
            "inset",
            "isolation",
            "left",
            "letterSpacing",
            "lightingColor",
            "markerSide",
            "mixBlendMode",
            "opacity",
            "order",
            "position",
            "quotes",
            "resize",
            "right",
            "rowGap",
            "tabSize",
            "tableLayout",
            "top",
            "userSelect",
            "verticalAlign",
            "visibility",
            "voiceFamily",
            "volume",
            "whiteSpace",
            "widows",
            "width",
            "zIndex",
            "pointerEvents"
        ];
        color = "Color";
        style = "Style";
        width = "Width";
        image = "Image";
        size = "Size";
        color_style_width = [
            color,
            style,
            width
        ];
        fitlength_fitwidth_image = [
            "FitLength",
            "FitWidth",
            image
        ];
        fitlength_fitwidth_image_radius = _to_consumable_array(fitlength_fitwidth_image).concat([
            "Radius"
        ]);
        color_style_width_fitlength_fitwidth_image = _to_consumable_array(color_style_width).concat(_to_consumable_array(fitlength_fitwidth_image));
        endRadius_startRadius = [
            "EndRadius",
            "StartRadius"
        ];
        bottom_left_right_top = [
            "Bottom",
            "Left",
            "Right",
            "Top"
        ];
        end_start = [
            "End",
            "Start"
        ];
        content_items_self = [
            "Content",
            "Items",
            "Self"
        ];
        blockSize_height_inlineSize_width = [
            "BlockSize",
            "Height",
            "InlineSize",
            width
        ];
        after_before = [
            "After",
            "Before"
        ];
        combine("borderBlock", color_style_width);
        combine("borderBlockEnd", color_style_width);
        combine("borderBlockStart", color_style_width);
        combine("outline", _to_consumable_array(color_style_width).concat([
            "Offset"
        ]));
        combine("border", _to_consumable_array(color_style_width).concat([
            "Boundary",
            "Break",
            "Collapse",
            "Radius",
            "Spacing"
        ]));
        combine("borderFit", [
            "Length",
            width
        ]);
        combine("borderInline", color_style_width);
        combine("borderInlineEnd", color_style_width);
        combine("borderInlineStart", color_style_width);
        combine("borderLeft", color_style_width_fitlength_fitwidth_image);
        combine("borderRight", color_style_width_fitlength_fitwidth_image);
        combine("borderTop", color_style_width_fitlength_fitwidth_image);
        combine("borderBottom", color_style_width_fitlength_fitwidth_image);
        combine("textDecoration", [
            color,
            style,
            "Line"
        ]);
        combine("textEmphasis", [
            color,
            style,
            "Position"
        ]);
        combine("scrollMargin", bottom_left_right_top);
        combine("scrollPadding", bottom_left_right_top);
        combine("padding", bottom_left_right_top);
        combine("margin", _to_consumable_array(bottom_left_right_top).concat([
            "Trim"
        ]));
        combine("scrollMarginBlock", end_start);
        combine("scrollMarginInline", end_start);
        combine("scrollPaddingBlock", end_start);
        combine("scrollPaddingInline", end_start);
        combine("gridColumn", end_start);
        combine("gridRow", end_start);
        combine("insetBlock", end_start);
        combine("insetInline", end_start);
        combine("marginBlock", end_start);
        combine("marginInline", end_start);
        combine("paddingBlock", end_start);
        combine("paddingInline", end_start);
        combine("pause", after_before);
        combine("cue", after_before);
        combine("mask", [
            "Clip",
            "Composite",
            image,
            "Mode",
            "Origin",
            "Position",
            "Repeat",
            size,
            "Type"
        ]);
        combine("borderImage", [
            "Outset",
            "Repeat",
            "Slice",
            "Source",
            "Transform",
            width
        ]);
        combine("maskBorder", [
            "Mode",
            "Outset",
            "Repeat",
            "Slice",
            "Source",
            width
        ]);
        combine("font", [
            "Family",
            "FeatureSettings",
            "Kerning",
            "LanguageOverride",
            "MaxSize",
            "MinSize",
            "OpticalSizing",
            "Palette",
            size,
            "SizeAdjust",
            "Stretch",
            style,
            "Weight",
            "VariationSettings"
        ]);
        combine("transform", [
            "Box",
            "Origin",
            style
        ]);
        combine("background", [
            color,
            image,
            "Attachment",
            "BlendMode",
            "Clip",
            "Origin",
            "Position",
            "Repeat",
            size
        ]);
        combine("listStyle", [
            image,
            "Position",
            "Type"
        ]);
        combine("scrollSnap", [
            "Align",
            "Stop",
            "Type"
        ]);
        combine("grid", [
            "Area",
            "AutoColumns",
            "AutoFlow",
            "AutoRows"
        ]);
        combine("gridTemplate", [
            "Areas",
            "Columns",
            "Rows"
        ]);
        combine("overflow", [
            "Block",
            "Inline",
            "Wrap",
            "X",
            "Y"
        ]);
        combine("transition", [
            "Delay",
            "Duration",
            "Property",
            "TimingFunction"
        ]);
        combine("color", [
            "Adjust",
            "InterpolationFilters",
            "Scheme"
        ]);
        combine("textAlign", [
            "All",
            "Last"
        ]);
        combine("page", [
            "BreakAfter",
            "BreakBefore",
            "BreakInside"
        ]);
        combine("animation", [
            "Delay",
            "Direction",
            "Duration",
            "FillMode",
            "IterationCount",
            "Name",
            "PlayState",
            "TimingFunction"
        ]);
        combine("flex", [
            "Basis",
            "Direction",
            "Flow",
            "Grow",
            "Shrink",
            "Wrap"
        ]);
        combine("offset", _to_consumable_array(after_before).concat(_to_consumable_array(end_start), [
            "Anchor",
            "Distance",
            "Path",
            "Position",
            "Rotate"
        ]));
        combine("perspective", [
            "Origin"
        ]);
        combine("clip", [
            "Path",
            "Rule"
        ]);
        combine("flow", [
            "From",
            "Into"
        ]);
        combine("align", [
            "Content",
            "Items",
            "Self"
        ], true);
        combine("alignment", [
            "Adjust",
            "Baseline"
        ], true);
        combine("borderStart", endRadius_startRadius, true);
        combine("borderEnd", endRadius_startRadius, true);
        combine("borderCorner", [
            "Fit",
            image,
            "ImageTransform"
        ], true);
        combine("borderTopLeft", fitlength_fitwidth_image_radius, true);
        combine("borderTopRight", fitlength_fitwidth_image_radius, true);
        combine("borderBottomLeft", fitlength_fitwidth_image_radius, true);
        combine("borderBottomRight", fitlength_fitwidth_image_radius, true);
        combine("column", [
            "s",
            "Count",
            "Fill",
            "Gap",
            "Rule",
            "RuleColor",
            "RuleStyle",
            "RuleWidth",
            "Span",
            width
        ], true);
        combine("break", _to_consumable_array(after_before).concat([
            "Inside"
        ]), true);
        combine("wrap", _to_consumable_array(after_before).concat([
            "Flow",
            "Inside",
            "Through"
        ]), true);
        combine("justify", content_items_self, true);
        combine("place", content_items_self, true);
        combine("max", _to_consumable_array(blockSize_height_inlineSize_width).concat([
            "Lines"
        ]), true);
        combine("min", blockSize_height_inlineSize_width, true);
        combine("line", [
            "Break",
            "Clamp",
            "Grid",
            "Height",
            "Padding",
            "Snap"
        ], true);
        combine("inline", [
            "BoxAlign",
            size,
            "Sizing"
        ], true);
        combine("text", [
            "CombineUpright",
            "GroupAlign",
            "Height",
            "Indent",
            "Justify",
            "Orientation",
            "Overflow",
            "Shadow",
            "SpaceCollapse",
            "SpaceTrim",
            "Spacing",
            "Transform",
            "UnderlinePosition",
            "Wrap"
        ], true);
        combine("shape", [
            "ImageThreshold",
            "Inside",
            "Margin",
            "Outside"
        ], true);
        combine("word", [
            "Break",
            "Spacing",
            "Wrap"
        ], true);
        combine("object", [
            "Fit",
            "Position"
        ], true);
        combine("box", [
            "DecorationBreak",
            "Shadow",
            "Sizing",
            "Snap"
        ], true);
        combine(WEBKIT, [
            "LineClamp",
            "BoxOrient",
            "TextFillColor",
            "TextStroke",
            "TextStrokeColor",
            "TextStrokeWidth"
        ], true);
        Style = /*#__PURE__*/ function() {
            "use strict";
            function Style(element) {
                _class_call_check(this, Style);
                this._element = element;
                this._usedStyleProp = /* @__PURE__ */ new Set();
                this._value = {};
            }
            _create_class(Style, [
                {
                    key: "setCssVariables",
                    value: function setCssVariables(styleKey) {
                        var _this = this;
                        this.hasOwnProperty(styleKey) || Object.defineProperty(this, styleKey, {
                            enumerable: true,
                            configurable: true,
                            get: function() {
                                return _this._value[styleKey] || "";
                            },
                            set: function(newVal) {
                                setStyle.call(_this, newVal, styleKey);
                            }
                        });
                    }
                },
                {
                    key: "cssText",
                    get: function get() {
                        var _this = this;
                        if (!this._usedStyleProp.size) return "";
                        var texts = [];
                        this._usedStyleProp.forEach(function(key) {
                            var val = _this[key];
                            if ((0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.isNull)(val) || (0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.isUndefined)(val)) return;
                            var styleName = isCssVariable(key) ? key : (0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.toDashed)(key);
                            if (styleName.indexOf("webkit") === 0 || styleName.indexOf("Webkit") === 0) {
                                styleName = "-".concat(styleName);
                            }
                            texts.push("".concat(styleName, ": ").concat(val, ";"));
                        });
                        return texts.join(" ");
                    },
                    set: function set(str) {
                        var _this = this;
                        this._pending = true;
                        recordCss(this);
                        this._usedStyleProp.forEach(function(prop) {
                            _this.removeProperty(prop);
                        });
                        if (str === "" || (0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.isUndefined)(str) || (0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.isNull)(str)) {
                            this._pending = false;
                            enqueueUpdate(this);
                            return;
                        }
                        var rules = str.split(";");
                        for(var i = 0; i < rules.length; i++){
                            var rule = rules[i].trim();
                            if (rule === "") {
                                continue;
                            }
                            var _rule_split = _to_array(rule.split(":")), propName = _rule_split[0], valList = _rule_split.slice(1);
                            var val = valList.join(":");
                            if ((0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.isUndefined)(val)) {
                                continue;
                            }
                            this.setProperty(propName.trim(), val.trim());
                        }
                        this._pending = false;
                        enqueueUpdate(this);
                    }
                },
                {
                    key: "setProperty",
                    value: function setProperty(propertyName, value) {
                        if (propertyName[0] === "-") {
                            this.setCssVariables(propertyName);
                        } else {
                            propertyName = (0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.toCamelCase)(propertyName);
                        }
                        if ((0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.isNull)(value) || (0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.isUndefined)(value)) {
                            this.removeProperty(propertyName);
                        } else {
                            this[propertyName] = value;
                        }
                    }
                },
                {
                    key: "removeProperty",
                    value: function removeProperty(propertyName) {
                        propertyName = (0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.toCamelCase)(propertyName);
                        if (!this._usedStyleProp.has(propertyName)) {
                            return "";
                        }
                        var value = this[propertyName];
                        this[propertyName] = void 0;
                        return value;
                    }
                },
                {
                    key: "getPropertyValue",
                    value: function getPropertyValue(propertyName) {
                        propertyName = (0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.toCamelCase)(propertyName);
                        var value = this[propertyName];
                        if (!value) {
                            return "";
                        }
                        return value;
                    }
                }
            ]);
            return Style;
        }();
        initStyle(Style);
        TaroElement = /*#__PURE__*/ function(TaroNode) {
            "use strict";
            _inherits(TaroElement1, TaroNode);
            var _super = _create_super(TaroElement1);
            function TaroElement1() {
                _class_call_check(this, TaroElement1);
                var _this;
                _this = _super.call(this);
                _this.props = {};
                _this.dataset = _chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.EMPTY_OBJ;
                _this.nodeType = 1;
                _this.style = new Style(_assert_this_initialized(_this));
                _chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.hooks.call("patchElement", _assert_this_initialized(_this));
                return _this;
            }
            _create_class(TaroElement1, [
                {
                    key: "_stopPropagation",
                    value: function _stopPropagation(event) {
                        var target = this;
                        while(target = target.parentNode){
                            var listeners = target.__handlers[event.type];
                            if (!(0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.isArray)(listeners)) {
                                continue;
                            }
                            for(var i = listeners.length; i--;){
                                var l = listeners[i];
                                l._stop = true;
                            }
                        }
                    }
                },
                {
                    key: "id",
                    get: function get() {
                        return this.getAttribute(ID);
                    },
                    set: function set(val) {
                        this.setAttribute(ID, val);
                    }
                },
                {
                    key: "className",
                    get: function get() {
                        return this.getAttribute(CLASS) || "";
                    },
                    set: function set(val) {
                        this.setAttribute(CLASS, val);
                    }
                },
                {
                    key: "cssText",
                    get: function get() {
                        return this.getAttribute(STYLE) || "";
                    }
                },
                {
                    key: "classList",
                    get: function get() {
                        return new ClassList(this.className, this);
                    }
                },
                {
                    key: "children",
                    get: function get() {
                        return this.childNodes.filter(isElement);
                    }
                },
                {
                    key: "attributes",
                    get: function get() {
                        var props = this.props;
                        var propKeys = Object.keys(props);
                        var style2 = this.style.cssText;
                        var attrs = propKeys.map(function(key) {
                            return {
                                name: key,
                                value: props[key]
                            };
                        });
                        return attrs.concat(style2 ? {
                            name: STYLE,
                            value: style2
                        } : []);
                    }
                },
                {
                    key: "textContent",
                    get: function get() {
                        var text = "";
                        var childNodes = this.childNodes;
                        for(var i = 0; i < childNodes.length; i++){
                            text += childNodes[i].textContent;
                        }
                        return text;
                    },
                    set: function set(text) {
                        _set(_get_prototype_of(TaroElement1.prototype), "textContent", text, this, true);
                    }
                },
                {
                    key: "hasAttribute",
                    value: function hasAttribute(qualifiedName) {
                        return !(0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.isUndefined)(this.props[qualifiedName]);
                    }
                },
                {
                    key: "hasAttributes",
                    value: function hasAttributes() {
                        return this.attributes.length > 0;
                    }
                },
                {
                    key: "focus",
                    get: function get() {
                        return function() {
                            this.setAttribute(FOCUS, true);
                        };
                    },
                    set: function set(value) {
                        this.setAttribute(FOCUS, value);
                    }
                },
                {
                    key: "blur",
                    value: function blur() {
                        this.setAttribute(FOCUS, false);
                    }
                },
                {
                    key: "setAttribute",
                    value: function setAttribute(qualifiedName, value) {
                        (0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.warn)((0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.isString)(value) && value.length > PROPERTY_THRESHOLD, "元素 ".concat(this.nodeName, " 的 ").concat(qualifiedName, " 属性值数据量过大，可能会影响渲染性能。考虑降低图片转为 base64 的阈值或在 CSS 中使用 base64。"));
                        var isPureView = this.nodeName === VIEW && !isHasExtractProp(this) && !this.isAnyEventBinded();
                        if (qualifiedName !== STYLE) {
                            MutationObserver.record({
                                target: this,
                                type: "attributes",
                                attributeName: qualifiedName,
                                oldValue: this.getAttribute(qualifiedName)
                            });
                        }
                        switch(qualifiedName){
                            case STYLE:
                                this.style.cssText = value;
                                break;
                            case ID:
                                if (this.uid !== this.sid) {
                                    eventSource.delete(this.uid);
                                }
                                value = String(value);
                                this.props[qualifiedName] = this.uid = value;
                                eventSource.set(value, this);
                                break;
                            default:
                                this.props[qualifiedName] = value;
                                if (qualifiedName.startsWith("data-")) {
                                    if (this.dataset === _chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.EMPTY_OBJ) {
                                        this.dataset = /* @__PURE__ */ Object.create(null);
                                    }
                                    this.dataset[(0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.toCamelCase)(qualifiedName.replace(/^data-/, ""))] = value;
                                }
                                break;
                        }
                        if (!this._root) return;
                        var componentsAlias2 = getComponentsAlias2();
                        var _alias = componentsAlias2[this.nodeName];
                        var viewAlias = componentsAlias2[VIEW]._num;
                        var staticViewAlias = componentsAlias2[STATIC_VIEW]._num;
                        var catchViewAlias = componentsAlias2[CATCH_VIEW]._num;
                        var _path = this._path;
                        qualifiedName = shortcutAttr(qualifiedName);
                        var qualifiedNameInCamelCase = (0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.toCamelCase)(qualifiedName);
                        var payload = {
                            path: "".concat(_path, ".").concat(qualifiedNameInCamelCase),
                            value: (0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(value) ? function() {
                                return value;
                            } : value
                        };
                        _chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.hooks.call("modifySetAttrPayload", this, qualifiedName, payload, componentsAlias2);
                        if (_alias) {
                            var qualifiedNameAlias = _alias[qualifiedNameInCamelCase] || qualifiedName;
                            payload.path = "".concat(_path, ".").concat((0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.toCamelCase)(qualifiedNameAlias));
                        }
                        this.enqueueUpdate(payload);
                        if (this.nodeName === VIEW) {
                            if (qualifiedNameInCamelCase === CATCHMOVE) {
                                this.enqueueUpdate({
                                    path: "".concat(_path, ".", "nn"),
                                    value: value ? catchViewAlias : this.isAnyEventBinded() ? viewAlias : staticViewAlias
                                });
                            } else if (isPureView && isHasExtractProp(this)) {
                                this.enqueueUpdate({
                                    path: "".concat(_path, ".", "nn"),
                                    value: staticViewAlias
                                });
                            }
                        }
                    }
                },
                {
                    key: "removeAttribute",
                    value: function removeAttribute(qualifiedName) {
                        var isStaticView = this.nodeName === VIEW && isHasExtractProp(this) && !this.isAnyEventBinded();
                        MutationObserver.record({
                            target: this,
                            type: "attributes",
                            attributeName: qualifiedName,
                            oldValue: this.getAttribute(qualifiedName)
                        });
                        if (qualifiedName === STYLE) {
                            this.style.cssText = "";
                        } else {
                            var isInterrupt = _chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.hooks.call("onRemoveAttribute", this, qualifiedName);
                            if (isInterrupt) {
                                return;
                            }
                            if (!this.props.hasOwnProperty(qualifiedName)) {
                                return;
                            }
                            delete this.props[qualifiedName];
                        }
                        if (!this._root) return;
                        var componentsAlias2 = getComponentsAlias2();
                        var _alias = componentsAlias2[this.nodeName];
                        var viewAlias = componentsAlias2[VIEW]._num;
                        var staticViewAlias = componentsAlias2[STATIC_VIEW]._num;
                        var pureViewAlias = componentsAlias2[PURE_VIEW]._num;
                        var _path = this._path;
                        qualifiedName = shortcutAttr(qualifiedName);
                        var qualifiedNameInCamelCase = (0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.toCamelCase)(qualifiedName);
                        var payload = {
                            path: "".concat(_path, ".").concat(qualifiedNameInCamelCase),
                            value: ""
                        };
                        _chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.hooks.call("modifyRmAttrPayload", this, qualifiedName, payload, componentsAlias2);
                        if (_alias) {
                            var qualifiedNameAlias = _alias[qualifiedNameInCamelCase] || qualifiedName;
                            payload.path = "".concat(_path, ".").concat((0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.toCamelCase)(qualifiedNameAlias));
                        }
                        this.enqueueUpdate(payload);
                        if (this.nodeName === VIEW) {
                            if (qualifiedNameInCamelCase === CATCHMOVE) {
                                this.enqueueUpdate({
                                    path: "".concat(_path, ".", "nn"),
                                    value: this.isAnyEventBinded() ? viewAlias : isHasExtractProp(this) ? staticViewAlias : pureViewAlias
                                });
                            } else if (isStaticView && !isHasExtractProp(this)) {
                                this.enqueueUpdate({
                                    path: "".concat(_path, ".", "nn"),
                                    value: pureViewAlias
                                });
                            }
                        }
                    }
                },
                {
                    key: "getAttribute",
                    value: function getAttribute(qualifiedName) {
                        var attr = qualifiedName === STYLE ? this.style.cssText : this.props[qualifiedName];
                        return attr !== null && attr !== void 0 ? attr : "";
                    }
                },
                {
                    key: "getElementsByTagName",
                    value: function getElementsByTagName(tagName) {
                        var _this = this;
                        return treeToArray(this, function(el) {
                            return el.nodeName === tagName || tagName === "*" && _this !== el;
                        });
                    }
                },
                {
                    key: "getElementsByClassName",
                    value: function getElementsByClassName(className) {
                        return treeToArray(this, function(el) {
                            var classList = el.classList;
                            var classNames = className.trim().split(/\s+/);
                            return classNames.every(function(c) {
                                return classList.has(c);
                            });
                        });
                    }
                },
                {
                    key: "dispatchEvent",
                    value: function dispatchEvent(event) {
                        var cancelable = event.cancelable;
                        var listeners = this.__handlers[event.type];
                        if (!(0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.isArray)(listeners)) {
                            return false;
                        }
                        for(var i = listeners.length; i--;){
                            var listener = listeners[i];
                            var result = void 0;
                            if (listener._stop) {
                                listener._stop = false;
                            } else {
                                _chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.hooks.call("modifyDispatchEvent", event, this);
                                result = listener.call(this, event);
                            }
                            if ((result === false || event._end) && cancelable) {
                                event.defaultPrevented = true;
                            }
                            if (!(0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.isUndefined)(result) && event.mpEvent) {
                                event.mpEvent[EVENT_CALLBACK_RESULT] = result;
                            }
                            if (event._end && event._stop) {
                                break;
                            }
                        }
                        if (event._stop) {
                            this._stopPropagation(event);
                        } else {
                            event._stop = true;
                        }
                        return listeners != null;
                    }
                },
                {
                    key: "addEventListener",
                    value: function addEventListener(type, handler, options2) {
                        var name = this.nodeName;
                        var SPECIAL_NODES2 = _chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.hooks.call("getSpecialNodes");
                        var sideEffect = true;
                        if ((0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.isObject)(options2) && options2.sideEffect === false) {
                            sideEffect = false;
                            delete options2.sideEffect;
                        }
                        if (sideEffect !== false && !this.isAnyEventBinded() && SPECIAL_NODES2.indexOf(name) > -1) {
                            var componentsAlias2 = getComponentsAlias2();
                            var alias = componentsAlias2[name]._num;
                            this.enqueueUpdate({
                                path: "".concat(this._path, ".", "nn"),
                                value: alias
                            });
                        }
                        _get(_get_prototype_of(TaroElement1.prototype), "addEventListener", this).call(this, type, handler, options2);
                    }
                },
                {
                    key: "removeEventListener",
                    value: function removeEventListener(type, handler) {
                        var sideEffect = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
                        _get(_get_prototype_of(TaroElement1.prototype), "removeEventListener", this).call(this, type, handler);
                        var name = this.nodeName;
                        var SPECIAL_NODES2 = _chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.hooks.call("getSpecialNodes");
                        if (sideEffect !== false && !this.isAnyEventBinded() && SPECIAL_NODES2.indexOf(name) > -1) {
                            var componentsAlias2 = getComponentsAlias2();
                            var value = isHasExtractProp(this) ? "static-".concat(name) : "pure-".concat(name);
                            var valueAlias = componentsAlias2[value]._num;
                            this.enqueueUpdate({
                                path: "".concat(this._path, ".", "nn"),
                                value: valueAlias
                            });
                        }
                    }
                }
            ], [
                {
                    key: "extend",
                    value: function extend1(methodName, options2) {
                        extend(TaroElement, methodName, options2);
                    }
                }
            ]);
            return TaroElement1;
        }(TaroNode);
        options = {
            prerender: true,
            debug: false
        };
        whitespace = /\s/;
        equalSign = /=/;
        alphanumeric = /[A-Za-z0-9]/;
        Scaner = /*#__PURE__*/ function() {
            "use strict";
            function Scaner(html) {
                _class_call_check(this, Scaner);
                this.tokens = [];
                this.position = initPosition();
                this.html = html;
            }
            _create_class(Scaner, [
                {
                    key: "scan",
                    value: function scan() {
                        var _this = this, html = _this.html, position = _this.position;
                        var len = html.length;
                        while(position.index < len){
                            var start = position.index;
                            this.scanText();
                            if (position.index === start) {
                                var isComment2 = html.startsWith("!--", start + 1);
                                if (isComment2) {
                                    this.scanComment();
                                } else {
                                    var tagName = this.scanTag();
                                    if (shouldBeIgnore(tagName)) {
                                        this.scanSkipTag(tagName);
                                    }
                                }
                            }
                        }
                        return this.tokens;
                    }
                },
                {
                    key: "scanText",
                    value: function scanText() {
                        var type = "text";
                        var _this = this, html = _this.html, position = _this.position;
                        var textEnd = findTextEnd(html, position.index);
                        if (textEnd === position.index) {
                            return;
                        }
                        if (textEnd === -1) {
                            textEnd = html.length;
                        }
                        var start = copyPosition(position);
                        var content = html.slice(position.index, textEnd);
                        jumpPosition(position, html, textEnd);
                        var end = copyPosition(position);
                        this.tokens.push({
                            type: type,
                            content: content,
                            position: {
                                start: start,
                                end: end
                            }
                        });
                    }
                },
                {
                    key: "scanComment",
                    value: function scanComment() {
                        var type = "comment";
                        var _this = this, html = _this.html, position = _this.position;
                        var start = copyPosition(position);
                        feedPosition(position, html, 4);
                        var contentEnd = html.indexOf("-->", position.index);
                        var commentEnd = contentEnd + 3;
                        if (contentEnd === -1) {
                            contentEnd = commentEnd = html.length;
                        }
                        var content = html.slice(position.index, contentEnd);
                        jumpPosition(position, html, commentEnd);
                        this.tokens.push({
                            type: type,
                            content: content,
                            position: {
                                start: start,
                                end: copyPosition(position)
                            }
                        });
                    }
                },
                {
                    key: "scanTag",
                    value: function scanTag() {
                        this.scanTagStart();
                        var tagName = this.scanTagName();
                        this.scanAttrs();
                        this.scanTagEnd();
                        return tagName;
                    }
                },
                {
                    key: "scanTagStart",
                    value: function scanTagStart() {
                        var type = "tag-start";
                        var _this = this, html = _this.html, position = _this.position;
                        var secondChar = html.charAt(position.index + 1);
                        var close = secondChar === "/";
                        var start = copyPosition(position);
                        feedPosition(position, html, close ? 2 : 1);
                        this.tokens.push({
                            type: type,
                            close: close,
                            position: {
                                start: start
                            }
                        });
                    }
                },
                {
                    key: "scanTagEnd",
                    value: function scanTagEnd() {
                        var type = "tag-end";
                        var _this = this, html = _this.html, position = _this.position;
                        var firstChar = html.charAt(position.index);
                        var close = firstChar === "/";
                        feedPosition(position, html, close ? 2 : 1);
                        var end = copyPosition(position);
                        this.tokens.push({
                            type: type,
                            close: close,
                            position: {
                                end: end
                            }
                        });
                    }
                },
                {
                    key: "scanTagName",
                    value: function scanTagName() {
                        var type = "tag";
                        var _this = this, html = _this.html, position = _this.position;
                        var len = html.length;
                        var start = position.index;
                        while(start < len){
                            var char = html.charAt(start);
                            var isTagChar = !(isWhitespaceChar(char) || char === "/" || char === ">");
                            if (isTagChar) break;
                            start++;
                        }
                        var end = start + 1;
                        while(end < len){
                            var char1 = html.charAt(end);
                            var isTagChar1 = !(isWhitespaceChar(char1) || char1 === "/" || char1 === ">");
                            if (!isTagChar1) break;
                            end++;
                        }
                        jumpPosition(position, html, end);
                        var tagName = html.slice(start, end);
                        this.tokens.push({
                            type: type,
                            content: tagName
                        });
                        return tagName;
                    }
                },
                {
                    key: "scanAttrs",
                    value: function scanAttrs() {
                        var _this = this, html = _this.html, position = _this.position, tokens = _this.tokens;
                        var cursor = position.index;
                        var quote = null;
                        var wordBegin = cursor;
                        var words = [];
                        var len = html.length;
                        while(cursor < len){
                            var char = html.charAt(cursor);
                            if (quote) {
                                var isQuoteEnd = char === quote;
                                if (isQuoteEnd) {
                                    quote = null;
                                }
                                cursor++;
                                continue;
                            }
                            var isTagEnd = char === "/" || char === ">";
                            if (isTagEnd) {
                                if (cursor !== wordBegin) {
                                    words.push(html.slice(wordBegin, cursor));
                                }
                                break;
                            }
                            if (isWordEnd(cursor, wordBegin, html)) {
                                if (cursor !== wordBegin) {
                                    words.push(html.slice(wordBegin, cursor));
                                }
                                wordBegin = cursor + 1;
                                cursor++;
                                continue;
                            }
                            var isQuoteStart = char === "'" || char === '"';
                            if (isQuoteStart) {
                                quote = char;
                                cursor++;
                                continue;
                            }
                            cursor++;
                        }
                        jumpPosition(position, html, cursor);
                        var wLen = words.length;
                        var type = "attribute";
                        for(var i = 0; i < wLen; i++){
                            var word = words[i];
                            var isNotPair = word.includes("=");
                            if (isNotPair) {
                                var secondWord = words[i + 1];
                                if (secondWord && secondWord.startsWith("=")) {
                                    if (secondWord.length > 1) {
                                        var newWord = word + secondWord;
                                        tokens.push({
                                            type: type,
                                            content: newWord
                                        });
                                        i += 1;
                                        continue;
                                    }
                                    var thirdWord = words[i + 2];
                                    i += 1;
                                    if (thirdWord) {
                                        var newWord1 = word + "=" + thirdWord;
                                        tokens.push({
                                            type: type,
                                            content: newWord1
                                        });
                                        i += 1;
                                        continue;
                                    }
                                }
                            }
                            if (word.endsWith("=")) {
                                var secondWord1 = words[i + 1];
                                if (secondWord1 && !secondWord1.includes("=")) {
                                    var newWord2 = word + secondWord1;
                                    tokens.push({
                                        type: type,
                                        content: newWord2
                                    });
                                    i += 1;
                                    continue;
                                }
                                var newWord3 = word.slice(0, -1);
                                tokens.push({
                                    type: type,
                                    content: newWord3
                                });
                                continue;
                            }
                            tokens.push({
                                type: type,
                                content: word
                            });
                        }
                    }
                },
                {
                    key: "scanSkipTag",
                    value: function scanSkipTag(tagName) {
                        var _this = this, html = _this.html, position = _this.position;
                        var safeTagName = tagName.toLowerCase();
                        var len = html.length;
                        while(position.index < len){
                            var nextTag = html.indexOf("</", position.index);
                            if (nextTag === -1) {
                                this.scanText();
                                break;
                            }
                            jumpPosition(position, html, nextTag);
                            var name = this.scanTag();
                            if (safeTagName === name.toLowerCase()) {
                                break;
                            }
                        }
                    }
                }
            ]);
            return Scaner;
        }();
        LEFT_BRACKET = "{";
        RIGHT_BRACKET = "}";
        CLASS_SELECTOR = ".";
        ID_SELECTOR = "#";
        CHILD_COMBINATOR = ">";
        GENERAL_SIBLING_COMBINATOR = "~";
        ADJACENT_SIBLING_COMBINATOR = "+";
        StyleTagParser = /*#__PURE__*/ function() {
            "use strict";
            function StyleTagParser() {
                _class_call_check(this, StyleTagParser);
                this.styles = [];
            }
            _create_class(StyleTagParser, [
                {
                    key: "extractStyle",
                    value: function extractStyle(src) {
                        var _this = this;
                        var REG_STYLE = /<style\s?[^>]*>((.|\n|\s)+?)<\/style>/g;
                        var html = src;
                        html = html.replace(REG_STYLE, function(_, $1) {
                            var style2 = $1.trim();
                            _this.stringToSelector(style2);
                            return "";
                        });
                        return html.trim();
                    }
                },
                {
                    key: "stringToSelector",
                    value: function stringToSelector(style2) {
                        var _loop = function() {
                            var rb = style2.indexOf(RIGHT_BRACKET);
                            var selectors = style2.slice(0, lb).trim();
                            var content = style2.slice(lb + 1, rb);
                            content = content.replace(/:(.*);/g, function(_, $1) {
                                var t = $1.trim().replace(/ +/g, "+++");
                                return ":".concat(t, ";");
                            });
                            content = content.replace(/ /g, "");
                            content = content.replace(/\+\+\+/g, " ");
                            if (!/;$/.test(content)) {
                                content += ";";
                            }
                            selectors.split(",").forEach(function(src) {
                                var selectorList = _this.parseSelector(src);
                                _this.styles.push({
                                    content: content,
                                    selectorList: selectorList
                                });
                            });
                            style2 = style2.slice(rb + 1);
                            lb = style2.indexOf(LEFT_BRACKET);
                        };
                        var _this = this;
                        var lb = style2.indexOf(LEFT_BRACKET);
                        while(lb > -1)_loop();
                    }
                },
                {
                    key: "parseSelector",
                    value: function parseSelector(src) {
                        var list = src.trim().replace(/ *([>~+]) */g, " $1").replace(/ +/g, " ").replace(/\[\s*([^[\]=\s]+)\s*=\s*([^[\]=\s]+)\s*\]/g, "[$1=$2]").split(" ");
                        var selectors = list.map(function(item) {
                            var firstChar = item.charAt(0);
                            var selector = {
                                isChild: firstChar === CHILD_COMBINATOR,
                                isGeneralSibling: firstChar === GENERAL_SIBLING_COMBINATOR,
                                isAdjacentSibling: firstChar === ADJACENT_SIBLING_COMBINATOR,
                                tag: null,
                                id: null,
                                class: [],
                                attrs: []
                            };
                            item = item.replace(/^[>~+]/, "");
                            item = item.replace(/\[(.+?)\]/g, function(_, $1) {
                                var _$1_split = _sliced_to_array($1.split("="), 2), key = _$1_split[0], value = _$1_split[1];
                                var all = $1.indexOf("=") === -1;
                                var attr = {
                                    all: all,
                                    key: key,
                                    value: all ? null : value
                                };
                                selector.attrs.push(attr);
                                return "";
                            });
                            item = item.replace(/([.#][A-Za-z0-9-_]+)/g, function(_, $1) {
                                if ($1[0] === ID_SELECTOR) {
                                    selector.id = $1.substr(1);
                                } else if ($1[0] === CLASS_SELECTOR) {
                                    selector.class.push($1.substr(1));
                                }
                                return "";
                            });
                            if (item !== "") {
                                selector.tag = item;
                            }
                            return selector;
                        });
                        return selectors;
                    }
                },
                {
                    key: "matchStyle",
                    value: function matchStyle(tagName, el, list) {
                        var _this = this;
                        var res = sortStyles(this.styles).reduce(function(str, param, i) {
                            var content = param.content, selectorList = param.selectorList;
                            var idx = list[i];
                            var selector = selectorList[idx];
                            var nextSelector = selectorList[idx + 1];
                            if ((nextSelector === null || nextSelector === void 0 ? void 0 : nextSelector.isGeneralSibling) || (nextSelector === null || nextSelector === void 0 ? void 0 : nextSelector.isAdjacentSibling)) {
                                selector = nextSelector;
                                idx += 1;
                                list[i] += 1;
                            }
                            var isMatch = _this.matchCurrent(tagName, el, selector);
                            if (isMatch && selector.isGeneralSibling) {
                                var prev = getPreviousElement(el);
                                while(prev){
                                    if (prev.h5tagName && _this.matchCurrent(prev.h5tagName, prev, selectorList[idx - 1])) {
                                        isMatch = true;
                                        break;
                                    }
                                    prev = getPreviousElement(prev);
                                    isMatch = false;
                                }
                            }
                            if (isMatch && selector.isAdjacentSibling) {
                                var prev1 = getPreviousElement(el);
                                if (!prev1 || !prev1.h5tagName) {
                                    isMatch = false;
                                } else {
                                    var isSiblingMatch = _this.matchCurrent(prev1.h5tagName, prev1, selectorList[idx - 1]);
                                    if (!isSiblingMatch) {
                                        isMatch = false;
                                    }
                                }
                            }
                            if (isMatch) {
                                if (idx === selectorList.length - 1) {
                                    return str + content;
                                } else if (idx < selectorList.length - 1) {
                                    list[i] += 1;
                                }
                            } else {
                                if (selector.isChild && idx > 0) {
                                    list[i] -= 1;
                                    if (_this.matchCurrent(tagName, el, selectorList[list[i]])) {
                                        list[i] += 1;
                                    }
                                }
                            }
                            return str;
                        }, "");
                        return res;
                    }
                },
                {
                    key: "matchCurrent",
                    value: function matchCurrent(tagName, el, selector) {
                        if (selector.tag && selector.tag !== tagName) return false;
                        if (selector.id && selector.id !== el.id) return false;
                        if (selector.class.length) {
                            var classList = el.className.split(" ");
                            for(var i = 0; i < selector.class.length; i++){
                                var cls = selector.class[i];
                                if (classList.indexOf(cls) === -1) {
                                    return false;
                                }
                            }
                        }
                        if (selector.attrs.length) {
                            for(var i1 = 0; i1 < selector.attrs.length; i1++){
                                var _selector_attrs_i = selector.attrs[i1], all = _selector_attrs_i.all, key = _selector_attrs_i.key, value = _selector_attrs_i.value;
                                if (all && !el.hasAttribute(key)) {
                                    return false;
                                } else {
                                    var attr = el.getAttribute(key);
                                    if (attr !== unquote(value || "")) {
                                        return false;
                                    }
                                }
                            }
                        }
                        return true;
                    }
                }
            ]);
            return StyleTagParser;
        }();
        specialMiniElements = {
            img: "image",
            iframe: "web-view"
        };
        internalCompsList = Object.keys(_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.internalComponents).map(function(i) {
            return i.toLowerCase();
        }).join(",");
        isMiniElements = makeMap(internalCompsList, true);
        isInlineElements = makeMap("a,i,abbr,iframe,select,acronym,slot,small,span,bdi,kbd,strong,big,map,sub,sup,br,mark,mark,meter,template,canvas,textarea,cite,object,time,code,output,u,data,picture,tt,datalist,var,dfn,del,q,em,s,embed,samp,b", true);
        isBlockElements = makeMap("address,fieldset,li,article,figcaption,main,aside,figure,nav,blockquote,footer,ol,details,form,p,dialog,h1,h2,h3,h4,h5,h6,pre,dd,header,section,div,hgroup,table,dl,hr,ul,dt", true);
        closingTagAncestorBreakers = {
            li: [
                "ul",
                "ol",
                "menu"
            ],
            dt: [
                "dl"
            ],
            dd: [
                "dl"
            ],
            tbody: [
                "table"
            ],
            thead: [
                "table"
            ],
            tfoot: [
                "table"
            ],
            tr: [
                "table"
            ],
            td: [
                "table"
            ]
        };
        options.html = {
            skipElements: /* @__PURE__ */ new Set([
                "style",
                "script"
            ]),
            voidElements: /* @__PURE__ */ new Set([
                "!doctype",
                "area",
                "base",
                "br",
                "col",
                "command",
                "embed",
                "hr",
                "img",
                "input",
                "keygen",
                "link",
                "meta",
                "param",
                "source",
                "track",
                "wbr"
            ]),
            closingElements: /* @__PURE__ */ new Set([
                "html",
                "head",
                "body",
                "p",
                "dt",
                "dd",
                "li",
                "option",
                "thead",
                "th",
                "tbody",
                "tr",
                "td",
                "tfoot",
                "colgroup"
            ]),
            renderHTMLTag: false
        };
        if (!(0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.isWebPlatform)()) {
            if (true) {
                TaroNode.extend("innerHTML", {
                    set: function set(html) {
                        setInnerHTML.call(this, this, html);
                    },
                    get: function get() {
                        return "";
                    }
                });
                if (false) {}
            }
            if (false) {}
            if (false) {}
            if (false) {}
            if (false) {}
        }
        TaroEvent = /*#__PURE__*/ function() {
            "use strict";
            function TaroEvent(type, opts, event) {
                _class_call_check(this, TaroEvent);
                this._stop = false;
                this._end = false;
                this.defaultPrevented = false;
                this.button = 0;
                this.timeStamp = Date.now();
                this.type = type.toLowerCase();
                this.mpEvent = event;
                this.bubbles = Boolean(opts && opts.bubbles);
                this.cancelable = Boolean(opts && opts.cancelable);
            }
            _create_class(TaroEvent, [
                {
                    key: "stopPropagation",
                    value: function stopPropagation() {
                        this._stop = true;
                    }
                },
                {
                    key: "stopImmediatePropagation",
                    value: function stopImmediatePropagation() {
                        this._end = this._stop = true;
                    }
                },
                {
                    key: "preventDefault",
                    value: function preventDefault() {
                        this.defaultPrevented = true;
                    }
                },
                {
                    key: "target",
                    get: function get() {
                        var _a, _b;
                        var cacheTarget = this.cacheTarget;
                        if (!cacheTarget) {
                            var target = Object.create(((_a = this.mpEvent) === null || _a === void 0 ? void 0 : _a.target) || null);
                            var element = env.document.getElementById(target.id);
                            target.dataset = element !== null ? element.dataset : _chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.EMPTY_OBJ;
                            for(var key in (_b = this.mpEvent) === null || _b === void 0 ? void 0 : _b.detail){
                                target[key] = this.mpEvent.detail[key];
                            }
                            this.cacheTarget = target;
                            return target;
                        } else {
                            return cacheTarget;
                        }
                    }
                },
                {
                    key: "currentTarget",
                    get: function get() {
                        var _a, _b, _c, _d;
                        var cacheCurrentTarget = this.cacheCurrentTarget;
                        if (!cacheCurrentTarget) {
                            var doc = env.document;
                            var currentTarget = Object.create(((_a = this.mpEvent) === null || _a === void 0 ? void 0 : _a.currentTarget) || null);
                            var element = doc.getElementById(currentTarget.id);
                            var targetElement = doc.getElementById(((_c = (_b = this.mpEvent) === null || _b === void 0 ? void 0 : _b.target) === null || _c === void 0 ? void 0 : _c.id) || null);
                            if (element === null || element && element === targetElement) {
                                this.cacheCurrentTarget = this.target;
                                return this.target;
                            }
                            currentTarget.dataset = element.dataset;
                            for(var key in (_d = this.mpEvent) === null || _d === void 0 ? void 0 : _d.detail){
                                currentTarget[key] = this.mpEvent.detail[key];
                            }
                            this.cacheCurrentTarget = currentTarget;
                            return currentTarget;
                        } else {
                            return cacheCurrentTarget;
                        }
                    }
                }
            ]);
            return TaroEvent;
        }();
        eventsBatch = {};
        FormElement = /*#__PURE__*/ function(TaroElement) {
            "use strict";
            _inherits(FormElement, TaroElement);
            var _super = _create_super(FormElement);
            function FormElement() {
                _class_call_check(this, FormElement);
                return _super.apply(this, arguments);
            }
            _create_class(FormElement, [
                {
                    key: "value",
                    get: function get() {
                        var val = this.props[VALUE];
                        return val == null ? "" : val;
                    },
                    set: function set(val) {
                        this.setAttribute(VALUE, val);
                    }
                },
                {
                    key: "dispatchEvent",
                    value: function dispatchEvent(event) {
                        if (event.mpEvent) {
                            var val = event.mpEvent.detail.value;
                            if (event.type === CHANGE) {
                                this.props.value = val;
                            } else if (event.type === INPUT) {
                                this.value = val;
                            }
                        }
                        return _get(_get_prototype_of(FormElement.prototype), "dispatchEvent", this).call(this, event);
                    }
                }
            ]);
            return FormElement;
        }(TaroElement);
        Performance = /*#__PURE__*/ function() {
            "use strict";
            function Performance() {
                _class_call_check(this, Performance);
                this.recorder = /* @__PURE__ */ new Map();
            }
            _create_class(Performance, [
                {
                    key: "start",
                    value: function start(id) {
                        if (!options.debug) {
                            return;
                        }
                        this.recorder.set(id, Date.now());
                    }
                },
                {
                    key: "stop",
                    value: function stop(id) {
                        if (!options.debug) {
                            return;
                        }
                        var now2 = Date.now();
                        var prev = this.recorder.get(id);
                        this.recorder.delete(id);
                        var time = now2 - prev;
                        console.log("".concat(id, " 时长： ").concat(time, "ms"));
                    }
                }
            ]);
            return Performance;
        }();
        perf = new Performance();
        TaroRootElement = /*#__PURE__*/ function(TaroElement) {
            "use strict";
            _inherits(TaroRootElement, TaroElement);
            var _super = _create_super(TaroRootElement);
            function TaroRootElement() {
                _class_call_check(this, TaroRootElement);
                var _this;
                _this = _super.call(this);
                _this.updatePayloads = [];
                _this.updateCallbacks = [];
                _this.pendingUpdate = false;
                _this.ctx = null;
                _this.nodeName = ROOT_STR;
                _this.tagName = ROOT_STR.toUpperCase();
                return _this;
            }
            _create_class(TaroRootElement, [
                {
                    key: "_path",
                    get: function get() {
                        return ROOT_STR;
                    }
                },
                {
                    key: "_root",
                    get: function get() {
                        return this;
                    }
                },
                {
                    key: "enqueueUpdate",
                    value: function enqueueUpdate(payload) {
                        this.updatePayloads.push(payload);
                        if (!this.pendingUpdate && this.ctx) {
                            this.performUpdate();
                        }
                    }
                },
                {
                    key: "performUpdate",
                    value: function performUpdate() {
                        var initRender = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false, prerender = arguments.length > 1 ? arguments[1] : void 0;
                        var _this = this;
                        this.pendingUpdate = true;
                        var ctx = this.ctx;
                        setTimeout(function() {
                            var _loop = function(path1) {
                                resetPaths.forEach(function(p) {
                                    if (path1.includes(p) && path1 !== p) {
                                        delete data[path1];
                                    }
                                });
                                var value = data[path1];
                                if ((0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(value)) {
                                    data[path1] = value();
                                }
                            };
                            var setDataMark = "".concat(SET_DATA, " 开始时间戳 ").concat(Date.now());
                            perf.start(setDataMark);
                            var data = /* @__PURE__ */ Object.create(null);
                            var resetPaths = new Set(initRender ? [
                                "root.cn.[0]",
                                "root.cn[0]"
                            ] : []);
                            while(_this.updatePayloads.length > 0){
                                var _this_updatePayloads_shift = _this.updatePayloads.shift(), path = _this_updatePayloads_shift.path, value = _this_updatePayloads_shift.value;
                                if (path.endsWith("cn")) {
                                    resetPaths.add(path);
                                }
                                data[path] = value;
                            }
                            for(var path1 in data)_loop(path1);
                            if ((0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(prerender)) return prerender(data);
                            _this.pendingUpdate = false;
                            var normalUpdate = {};
                            var customWrapperMap = /* @__PURE__ */ new Map();
                            if (initRender) {
                                normalUpdate = data;
                            } else {
                                for(var p in data){
                                    var dataPathArr = p.split(".");
                                    var found = findCustomWrapper(_this, dataPathArr);
                                    if (found) {
                                        var customWrapper = found.customWrapper, splitedPath = found.splitedPath;
                                        customWrapperMap.set(customWrapper, Object.assign(Object.assign({}, customWrapperMap.get(customWrapper) || {}), _define_property({}, "i.".concat(splitedPath), data[p])));
                                    } else {
                                        normalUpdate[p] = data[p];
                                    }
                                }
                            }
                            var customWrapperCount = customWrapperMap.size;
                            var isNeedNormalUpdate = Object.keys(normalUpdate).length > 0;
                            var updateArrLen = customWrapperCount + (isNeedNormalUpdate ? 1 : 0);
                            var executeTime = 0;
                            var cb = function() {
                                if (++executeTime === updateArrLen) {
                                    perf.stop(setDataMark);
                                    _this.flushUpdateCallback();
                                    initRender && perf.stop(PAGE_INIT);
                                }
                            };
                            if (customWrapperCount) {
                                customWrapperMap.forEach(function(data2, ctx2) {
                                    if (options.debug) {
                                        console.log("custom wrapper setData: ", data2);
                                    }
                                    ctx2.setData(data2, cb);
                                });
                            }
                            if (isNeedNormalUpdate) {
                                if (options.debug) {
                                    console.log("page setData:", normalUpdate);
                                }
                                ctx.setData(normalUpdate, cb);
                            }
                        }, 0);
                    }
                },
                {
                    key: "enqueueUpdateCallback",
                    value: function enqueueUpdateCallback(cb, ctx) {
                        this.updateCallbacks.push(function() {
                            ctx ? cb.call(ctx) : cb();
                        });
                    }
                },
                {
                    key: "flushUpdateCallback",
                    value: function flushUpdateCallback() {
                        var updateCallbacks = this.updateCallbacks;
                        if (!updateCallbacks.length) return;
                        var copies = updateCallbacks.slice(0);
                        this.updateCallbacks.length = 0;
                        for(var i = 0; i < copies.length; i++){
                            copies[i]();
                        }
                    }
                }
            ]);
            return TaroRootElement;
        }(TaroElement);
        TaroText = /*#__PURE__*/ function(TaroNode) {
            "use strict";
            _inherits(TaroText, TaroNode);
            var _super = _create_super(TaroText);
            function TaroText(value) {
                _class_call_check(this, TaroText);
                var _this;
                _this = _super.call(this);
                _this.nodeType = 3;
                _this.nodeName = "#text";
                _this._value = value;
                return _this;
            }
            _create_class(TaroText, [
                {
                    key: "textContent",
                    get: function get() {
                        return this._value;
                    },
                    set: function set(text) {
                        MutationObserver.record({
                            target: this,
                            type: "characterData",
                            oldValue: this._value
                        });
                        this._value = text;
                        this.enqueueUpdate({
                            path: "".concat(this._path, ".", "v"),
                            value: text
                        });
                    }
                },
                {
                    key: "nodeValue",
                    get: function get() {
                        return this._value;
                    },
                    set: function set(text) {
                        this.textContent = text;
                    }
                },
                {
                    key: "data",
                    get: function get() {
                        return this._value;
                    },
                    set: function set(text) {
                        this.textContent = text;
                    }
                }
            ]);
            return TaroText;
        }(TaroNode);
        findReg = /[!'()~]|%20|%00/g;
        plusReg = /\+/g;
        replaceCharMap = {
            "!": "%21",
            "'": "%27",
            "(": "%28",
            ")": "%29",
            "~": "%7E",
            "%20": "+",
            "%00": "\x00"
        };
        URLSearchParams = /*#__PURE__*/ function() {
            "use strict";
            function URLSearchParams(query) {
                _class_call_check(this, URLSearchParams);
                _URLSearchParams_dict.set(this, /* @__PURE__ */ Object.create(null));
                query !== null && query !== void 0 ? query : query = "";
                var dict = __classPrivateFieldGet(this, _URLSearchParams_dict, "f");
                if (typeof query === "string") {
                    if (query.charAt(0) === "?") {
                        query = query.slice(1);
                    }
                    for(var pairs = query.split("&"), i = 0, length = pairs.length; i < length; i++){
                        var value = pairs[i];
                        var index = value.indexOf("=");
                        if (index > -1) {
                            appendTo(dict, decode(value.slice(0, index)), decode(value.slice(index + 1)));
                        } else if (value.length) {
                            appendTo(dict, decode(value), "");
                        }
                    }
                } else {
                    if ((0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.isArray)(query)) {
                        for(var i1 = 0, length1 = query.length; i1 < length1; i1++){
                            var value1 = query[i1];
                            appendTo(dict, value1[0], value1[1]);
                        }
                    } else if (query.forEach) {
                        query.forEach(addEach, dict);
                    } else {
                        for(var key in query){
                            appendTo(dict, key, query[key]);
                        }
                    }
                }
            }
            _create_class(URLSearchParams, [
                {
                    key: "append",
                    value: function append(name, value) {
                        appendTo(__classPrivateFieldGet(this, _URLSearchParams_dict, "f"), name, value);
                    }
                },
                {
                    key: "delete",
                    value: function _delete(name) {
                        delete __classPrivateFieldGet(this, _URLSearchParams_dict, "f")[name];
                    }
                },
                {
                    key: "get",
                    value: function get(name) {
                        var dict = __classPrivateFieldGet(this, _URLSearchParams_dict, "f");
                        return name in dict ? dict[name][0] : null;
                    }
                },
                {
                    key: "getAll",
                    value: function getAll(name) {
                        var dict = __classPrivateFieldGet(this, _URLSearchParams_dict, "f");
                        return name in dict ? dict[name].slice(0) : [];
                    }
                },
                {
                    key: "has",
                    value: function has(name) {
                        return name in __classPrivateFieldGet(this, _URLSearchParams_dict, "f");
                    }
                },
                {
                    key: "keys",
                    value: function keys() {
                        return Object.keys(__classPrivateFieldGet(this, _URLSearchParams_dict, "f"));
                    }
                },
                {
                    key: "set",
                    value: function set(name, value) {
                        __classPrivateFieldGet(this, _URLSearchParams_dict, "f")[name] = [
                            "" + value
                        ];
                    }
                },
                {
                    key: "forEach",
                    value: function forEach(callback, thisArg) {
                        var dict = __classPrivateFieldGet(this, _URLSearchParams_dict, "f");
                        Object.getOwnPropertyNames(dict).forEach(function(name) {
                            dict[name].forEach(function(value) {
                                callback.call(thisArg, value, name, this);
                            }, this);
                        }, this);
                    }
                },
                {
                    key: "toJSON",
                    value: function toJSON() {
                        return {};
                    }
                },
                {
                    key: "toString",
                    value: function toString() {
                        var dict = __classPrivateFieldGet(this, _URLSearchParams_dict, "f");
                        var query = [];
                        for(var key in dict){
                            var name = encode(key);
                            for(var i = 0, value = dict[key]; i < value.length; i++){
                                query.push(name + "=" + encode(value[i]));
                            }
                        }
                        return query.join("&");
                    }
                }
            ]);
            return URLSearchParams;
        }();
        _URLSearchParams_dict = /* @__PURE__ */ new WeakMap();
        URL = /*#__PURE__*/ function() {
            "use strict";
            function URL(url, base) {
                _class_call_check(this, URL);
                _URL_hash.set(this, "");
                _URL_hostname.set(this, "");
                _URL_pathname.set(this, "");
                _URL_port.set(this, "");
                _URL_protocol.set(this, "");
                _URL_search.set(this, void 0);
                if (!(0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.isString)(url)) url = String(url);
                var parseResult = parseUrlBase(url, base);
                var hash = parseResult.hash, hostname = parseResult.hostname, pathname = parseResult.pathname, port = parseResult.port, protocol = parseResult.protocol, search = parseResult.search;
                __classPrivateFieldSet(this, _URL_hash, hash, "f");
                __classPrivateFieldSet(this, _URL_hostname, hostname, "f");
                __classPrivateFieldSet(this, _URL_pathname, pathname || "/", "f");
                __classPrivateFieldSet(this, _URL_port, port, "f");
                __classPrivateFieldSet(this, _URL_protocol, protocol, "f");
                __classPrivateFieldSet(this, _URL_search, new URLSearchParams(search), "f");
            }
            _create_class(URL, [
                {
                    key: "protocol",
                    get: function get() {
                        return __classPrivateFieldGet(this, _URL_protocol, "f");
                    },
                    set: function set(val) {
                        (0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.isString)(val) && __classPrivateFieldSet(this, _URL_protocol, val.trim(), "f");
                    }
                },
                {
                    key: "host",
                    get: function get() {
                        return this.hostname + (this.port ? ":" + this.port : "");
                    },
                    set: function set(val) {
                        if (val && (0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.isString)(val)) {
                            val = val.trim();
                            var _parseUrl = parseUrl("//".concat(val)), hostname = _parseUrl.hostname, port = _parseUrl.port;
                            this.hostname = hostname;
                            this.port = port;
                        }
                    }
                },
                {
                    key: "hostname",
                    get: function get() {
                        return __classPrivateFieldGet(this, _URL_hostname, "f");
                    },
                    set: function set(val) {
                        val && (0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.isString)(val) && __classPrivateFieldSet(this, _URL_hostname, val.trim(), "f");
                    }
                },
                {
                    key: "port",
                    get: function get() {
                        return __classPrivateFieldGet(this, _URL_port, "f");
                    },
                    set: function set(val) {
                        (0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.isString)(val) && __classPrivateFieldSet(this, _URL_port, val.trim(), "f");
                    }
                },
                {
                    key: "pathname",
                    get: function get() {
                        return __classPrivateFieldGet(this, _URL_pathname, "f");
                    },
                    set: function set(val) {
                        if ((0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.isString)(val)) {
                            val = val.trim();
                            var HEAD_REG = /^(\/|\.\/|\.\.\/)/;
                            var temp = val;
                            while(HEAD_REG.test(temp)){
                                temp = temp.replace(HEAD_REG, "");
                            }
                            if (temp) __classPrivateFieldSet(this, _URL_pathname, "/" + temp, "f");
                            else __classPrivateFieldSet(this, _URL_pathname, "/", "f");
                        }
                    }
                },
                {
                    key: "search",
                    get: function get() {
                        var val = __classPrivateFieldGet(this, _URL_search, "f").toString();
                        return val.length === 0 || val.startsWith("?") ? val : "?".concat(val);
                    },
                    set: function set(val) {
                        if ((0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.isString)(val)) {
                            val = val.trim();
                            __classPrivateFieldSet(this, _URL_search, new URLSearchParams(val), "f");
                        }
                    }
                },
                {
                    key: "hash",
                    get: function get() {
                        return __classPrivateFieldGet(this, _URL_hash, "f");
                    },
                    set: function set(val) {
                        if ((0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.isString)(val)) {
                            val = val.trim();
                            if (val) __classPrivateFieldSet(this, _URL_hash, val.startsWith("#") ? val : "#".concat(val), "f");
                            else __classPrivateFieldSet(this, _URL_hash, "", "f");
                        }
                    }
                },
                {
                    key: "href",
                    get: function get() {
                        return "".concat(this.protocol, "//").concat(this.host).concat(this.pathname).concat(this.search).concat(this.hash);
                    },
                    set: function set(val) {
                        if (val && (0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.isString)(val)) {
                            val = val.trim();
                            var _parseUrl = parseUrl(val), protocol = _parseUrl.protocol, hostname = _parseUrl.hostname, port = _parseUrl.port, hash = _parseUrl.hash, search = _parseUrl.search, pathname = _parseUrl.pathname;
                            this.protocol = protocol;
                            this.hostname = hostname;
                            this.pathname = pathname;
                            this.port = port;
                            this.hash = hash;
                            this.search = search;
                        }
                    }
                },
                {
                    key: "origin",
                    get: function get() {
                        return "".concat(this.protocol, "//").concat(this.host);
                    },
                    set: function set(val) {
                        if (val && (0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.isString)(val)) {
                            val = val.trim();
                            var _parseUrl = parseUrl(val), protocol = _parseUrl.protocol, hostname = _parseUrl.hostname, port = _parseUrl.port;
                            this.protocol = protocol;
                            this.hostname = hostname;
                            this.port = port;
                        }
                    }
                },
                {
                    key: "searchParams",
                    get: function get() {
                        return __classPrivateFieldGet(this, _URL_search, "f");
                    }
                },
                {
                    key: "toString",
                    value: function toString() {
                        return this.href;
                    }
                },
                {
                    key: "toJSON",
                    value: function toJSON() {
                        return this.toString();
                    }
                },
                {
                    key: "_toRaw",
                    value: function _toRaw() {
                        return {
                            protocol: this.protocol,
                            port: this.port,
                            host: this.host,
                            hostname: this.hostname,
                            pathname: this.pathname,
                            hash: this.hash,
                            search: this.search,
                            origin: this.origin,
                            href: this.href
                        };
                    }
                }
            ], [
                {
                    key: "createObjectURL",
                    value: function createObjectURL() {
                        throw new Error("Oops, not support URL.createObjectURL() in miniprogram.");
                    }
                },
                {
                    key: "revokeObjectURL",
                    value: function revokeObjectURL() {
                        throw new Error("Oops, not support URL.revokeObjectURL() in miniprogram.");
                    }
                }
            ]);
            return URL;
        }();
        _URL_hash = /* @__PURE__ */ new WeakMap(), _URL_hostname = /* @__PURE__ */ new WeakMap(), _URL_pathname = /* @__PURE__ */ new WeakMap(), _URL_port = /* @__PURE__ */ new WeakMap(), _URL_protocol = /* @__PURE__ */ new WeakMap(), _URL_search = /* @__PURE__ */ new WeakMap();
        AnchorElement = /*#__PURE__*/ function(TaroElement) {
            "use strict";
            _inherits(AnchorElement, TaroElement);
            var _super = _create_super(AnchorElement);
            function AnchorElement() {
                _class_call_check(this, AnchorElement);
                return _super.apply(this, arguments);
            }
            _create_class(AnchorElement, [
                {
                    key: "href",
                    get: function get() {
                        var _a;
                        return (_a = this.props["href"]) !== null && _a !== void 0 ? _a : "";
                    },
                    set: function set(val) {
                        this.setAttribute("href", val);
                    }
                },
                {
                    key: "protocol",
                    get: function get() {
                        var _a;
                        return (_a = this.props["protocol"]) !== null && _a !== void 0 ? _a : "";
                    }
                },
                {
                    key: "host",
                    get: function get() {
                        var _a;
                        return (_a = this.props["host"]) !== null && _a !== void 0 ? _a : "";
                    }
                },
                {
                    key: "search",
                    get: function get() {
                        var _a;
                        return (_a = this.props["search"]) !== null && _a !== void 0 ? _a : "";
                    }
                },
                {
                    key: "hash",
                    get: function get() {
                        var _a;
                        return (_a = this.props["hash"]) !== null && _a !== void 0 ? _a : "";
                    }
                },
                {
                    key: "hostname",
                    get: function get() {
                        var _a;
                        return (_a = this.props["hostname"]) !== null && _a !== void 0 ? _a : "";
                    }
                },
                {
                    key: "port",
                    get: function get() {
                        var _a;
                        return (_a = this.props["port"]) !== null && _a !== void 0 ? _a : "";
                    }
                },
                {
                    key: "pathname",
                    get: function get() {
                        var _a;
                        return (_a = this.props["pathname"]) !== null && _a !== void 0 ? _a : "";
                    }
                },
                {
                    key: "setAttribute",
                    value: function setAttribute(qualifiedName, value) {
                        if (qualifiedName === "href") {
                            var willSetAttr = parseUrl(value);
                            for(var k in willSetAttr){
                                _get(_get_prototype_of(AnchorElement.prototype), "setAttribute", this).call(this, k, willSetAttr[k]);
                            }
                        } else {
                            _get(_get_prototype_of(AnchorElement.prototype), "setAttribute", this).call(this, qualifiedName, value);
                        }
                    }
                }
            ]);
            return AnchorElement;
        }(TaroElement);
        CustomWrapperElement = /*#__PURE__*/ function(TaroElement) {
            "use strict";
            _inherits(CustomWrapperElement, TaroElement);
            var _super = _create_super(CustomWrapperElement);
            function CustomWrapperElement() {
                _class_call_check(this, CustomWrapperElement);
                return _super.apply(this, arguments);
            }
            return CustomWrapperElement;
        }(TaroElement);
        TaroDocument = /*#__PURE__*/ function(TaroElement1) {
            "use strict";
            _inherits(TaroDocument, TaroElement1);
            var _super = _create_super(TaroDocument);
            function TaroDocument() {
                _class_call_check(this, TaroDocument);
                var _this;
                _this = _super.call(this);
                _this.createEvent = createEvent;
                _this.nodeType = 9;
                _this.nodeName = DOCUMENT_ELEMENT_NAME;
                return _this;
            }
            _create_class(TaroDocument, [
                {
                    key: "createElement",
                    value: function createElement(type) {
                        var nodeName = type.toLowerCase();
                        var element;
                        switch(true){
                            case nodeName === ROOT_STR:
                                element = new TaroRootElement();
                                return element;
                            case _chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.controlledComponent.has(nodeName):
                                element = new FormElement();
                                break;
                            case nodeName === A:
                                element = new AnchorElement();
                                break;
                            case nodeName === CUSTOM_WRAPPER:
                                element = new CustomWrapperElement();
                                break;
                            default:
                                element = new TaroElement();
                                break;
                        }
                        element.nodeName = nodeName;
                        element.tagName = type.toUpperCase();
                        return element;
                    }
                },
                {
                    key: "createElementNS",
                    value: function createElementNS(_svgNS, type) {
                        return this.createElement(type);
                    }
                },
                {
                    key: "createTextNode",
                    value: function createTextNode(text) {
                        return new TaroText(text);
                    }
                },
                {
                    key: "getElementById",
                    value: function getElementById(id) {
                        var el = eventSource.get(id);
                        return (0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.isUndefined)(el) ? null : el;
                    }
                },
                {
                    key: "querySelector",
                    value: function querySelector(query) {
                        if (/^#/.test(query)) {
                            return this.getElementById(query.slice(1));
                        }
                        return null;
                    }
                },
                {
                    key: "querySelectorAll",
                    value: function querySelectorAll() {
                        return [];
                    }
                },
                {
                    key: "createComment",
                    value: function createComment() {
                        var textnode = new TaroText("");
                        textnode.nodeName = COMMENT;
                        return textnode;
                    }
                },
                {
                    key: "defaultView",
                    get: function get() {
                        return env.window;
                    }
                }
            ]);
            return TaroDocument;
        }(TaroElement);
        if (!(0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.isWebPlatform)()) {
            var createDocument = function createDocument() {
                var doc = new TaroDocument();
                var documentCreateElement = doc.createElement.bind(doc);
                var html = documentCreateElement(HTML);
                var head = documentCreateElement(HEAD);
                var body = documentCreateElement(BODY);
                var app = documentCreateElement(APP);
                app.id = APP;
                var container = documentCreateElement(CONTAINER);
                doc.appendChild(html);
                html.appendChild(head);
                html.appendChild(body);
                body.appendChild(container);
                container.appendChild(app);
                doc.documentElement = html;
                doc.head = head;
                doc.body = body;
                return doc;
            };
            document$1 = env.document = createDocument();
        } else {
            document$1 = env.document;
        }
        eventCenter = _chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.hooks.call("getEventCenter", _chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.Events);
        RuntimeCache = /*#__PURE__*/ function() {
            "use strict";
            function RuntimeCache(name) {
                _class_call_check(this, RuntimeCache);
                this.cache = /* @__PURE__ */ new Map();
                this.name = name;
            }
            _create_class(RuntimeCache, [
                {
                    key: "has",
                    value: function has(identifier) {
                        return this.cache.has(identifier);
                    }
                },
                {
                    key: "set",
                    value: function set(identifier, ctx) {
                        if (identifier && ctx) {
                            this.cache.set(identifier, ctx);
                        }
                    }
                },
                {
                    key: "get",
                    value: function get(identifier) {
                        if (this.has(identifier)) return this.cache.get(identifier);
                    }
                },
                {
                    key: "delete",
                    value: function _delete(identifier) {
                        this.cache.delete(identifier);
                    }
                }
            ]);
            return RuntimeCache;
        }();
        cache$1 = new RuntimeCache("history");
        History = /*#__PURE__*/ function(Events) {
            "use strict";
            _inherits(History, Events);
            var _super = _create_super(History);
            function History(location2, options2) {
                _class_call_check(this, History);
                var _this;
                _this = _super.call(this);
                _History_instances.add(_assert_this_initialized(_this));
                _History_location.set(_assert_this_initialized(_this), void 0);
                _History_stack.set(_assert_this_initialized(_this), []);
                _History_cur.set(_assert_this_initialized(_this), 0);
                _History_window.set(_assert_this_initialized(_this), void 0);
                __classPrivateFieldSet(_assert_this_initialized(_this), _History_window, options2.window, "f");
                __classPrivateFieldSet(_assert_this_initialized(_this), _History_location, location2, "f");
                __classPrivateFieldGet(_this, _History_location, "f").on("__record_history__", function(href) {
                    var _a;
                    __classPrivateFieldSet(_assert_this_initialized(_this), _History_cur, (_a = __classPrivateFieldGet(_assert_this_initialized(_this), _History_cur, "f"), _a++, _a), "f");
                    __classPrivateFieldSet(_assert_this_initialized(_this), _History_stack, __classPrivateFieldGet(_this, _History_stack, "f").slice(0, __classPrivateFieldGet(_assert_this_initialized(_this), _History_cur, "f")), "f");
                    __classPrivateFieldGet(_this, _History_stack, "f").push({
                        state: null,
                        title: "",
                        url: href
                    });
                }, null);
                __classPrivateFieldGet(_this, _History_location, "f").on("__reset_history__", function(href) {
                    __classPrivateFieldGet(_this, _History_instances, "m", _History_reset).call(_assert_this_initialized(_this), href);
                }, null);
                _this.on(CONTEXT_ACTIONS.INIT, function() {
                    __classPrivateFieldGet(_this, _History_instances, "m", _History_reset).call(_assert_this_initialized(_this));
                }, null);
                _this.on(CONTEXT_ACTIONS.RESTORE, function(pageId2) {
                    cache$1.set(pageId2, {
                        location: __classPrivateFieldGet(_assert_this_initialized(_this), _History_location, "f"),
                        stack: __classPrivateFieldGet(_this, _History_stack, "f").slice(),
                        cur: __classPrivateFieldGet(_assert_this_initialized(_this), _History_cur, "f")
                    });
                }, null);
                _this.on(CONTEXT_ACTIONS.RECOVER, function(pageId2) {
                    if (cache$1.has(pageId2)) {
                        var ctx = cache$1.get(pageId2);
                        __classPrivateFieldSet(_assert_this_initialized(_this), _History_location, ctx.location, "f");
                        __classPrivateFieldSet(_assert_this_initialized(_this), _History_stack, ctx.stack, "f");
                        __classPrivateFieldSet(_assert_this_initialized(_this), _History_cur, ctx.cur, "f");
                    }
                }, null);
                _this.on(CONTEXT_ACTIONS.DESTORY, function(pageId2) {
                    cache$1.delete(pageId2);
                }, null);
                __classPrivateFieldGet(_this, _History_instances, "m", _History_reset).call(_assert_this_initialized(_this));
                return _this;
            }
            _create_class(History, [
                {
                    key: "length",
                    get: function get() {
                        return __classPrivateFieldGet(this, _History_stack, "f").length;
                    }
                },
                {
                    key: "state",
                    get: function get() {
                        return __classPrivateFieldGet(this, _History_stack, "f")[__classPrivateFieldGet(this, _History_cur, "f")];
                    }
                },
                {
                    key: "go",
                    value: function go(delta) {
                        if (!(0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.isNumber)(delta) || isNaN(delta)) return;
                        var targetIdx = __classPrivateFieldGet(this, _History_cur, "f") + delta;
                        targetIdx = Math.min(Math.max(targetIdx, 0), this.length - 1);
                        __classPrivateFieldSet(this, _History_cur, targetIdx, "f");
                        __classPrivateFieldGet(this, _History_location, "f").trigger("__set_href_without_history__", __classPrivateFieldGet(this, _History_stack, "f")[__classPrivateFieldGet(this, _History_cur, "f")].url);
                        __classPrivateFieldGet(this, _History_window, "f").trigger("popstate", __classPrivateFieldGet(this, _History_stack, "f")[__classPrivateFieldGet(this, _History_cur, "f")]);
                    }
                },
                {
                    key: "back",
                    value: function back() {
                        this.go(-1);
                    }
                },
                {
                    key: "forward",
                    value: function forward() {
                        this.go(1);
                    }
                },
                {
                    key: "pushState",
                    value: function pushState(state, title, url) {
                        if (!url || !(0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.isString)(url)) return;
                        __classPrivateFieldSet(this, _History_stack, __classPrivateFieldGet(this, _History_stack, "f").slice(0, __classPrivateFieldGet(this, _History_cur, "f") + 1), "f");
                        __classPrivateFieldGet(this, _History_stack, "f").push({
                            state: state,
                            title: title,
                            url: url
                        });
                        __classPrivateFieldSet(this, _History_cur, this.length - 1, "f");
                        __classPrivateFieldGet(this, _History_location, "f").trigger("__set_href_without_history__", url);
                    }
                },
                {
                    key: "replaceState",
                    value: function replaceState(state, title, url) {
                        if (!url || !(0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.isString)(url)) return;
                        __classPrivateFieldGet(this, _History_stack, "f")[__classPrivateFieldGet(this, _History_cur, "f")] = {
                            state: state,
                            title: title,
                            url: url
                        };
                        __classPrivateFieldGet(this, _History_location, "f").trigger("__set_href_without_history__", url);
                    }
                },
                {
                    key: "cache",
                    get: function get() {
                        return cache$1;
                    }
                }
            ]);
            return History;
        }(_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.Events);
        _History_location = /* @__PURE__ */ new WeakMap(), _History_stack = /* @__PURE__ */ new WeakMap(), _History_cur = /* @__PURE__ */ new WeakMap(), _History_window = /* @__PURE__ */ new WeakMap(), _History_instances = /* @__PURE__ */ new WeakSet(), _History_reset = function _History_reset2() {
            var href = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
            __classPrivateFieldSet(this, _History_stack, [
                {
                    state: null,
                    title: "",
                    url: href || __classPrivateFieldGet(this, _History_location, "f").href
                }
            ], "f");
            __classPrivateFieldSet(this, _History_cur, 0, "f");
        };
        Current = {
            app: null,
            router: null,
            page: null
        };
        getCurrentInstance = function() {
            return Current;
        };
        INIT_URL = "https://taro.com";
        cache = new RuntimeCache("location");
        Location = /*#__PURE__*/ function(Events) {
            "use strict";
            _inherits(Location, Events);
            var _super = _create_super(Location);
            function Location(options2) {
                _class_call_check(this, Location);
                var _this;
                _this = _super.call(this);
                _Location_instances.add(_assert_this_initialized(_this));
                _Location_url.set(_assert_this_initialized(_this), new URL(INIT_URL));
                _Location_noCheckUrl.set(_assert_this_initialized(_this), false);
                _Location_window.set(_assert_this_initialized(_this), void 0);
                __classPrivateFieldSet(_assert_this_initialized(_this), _Location_window, options2.window, "f");
                __classPrivateFieldGet(_this, _Location_instances, "m", _Location_reset).call(_assert_this_initialized(_this));
                _this.on("__set_href_without_history__", function(href) {
                    __classPrivateFieldSet(_assert_this_initialized(_this), _Location_noCheckUrl, true, "f");
                    var lastHash = __classPrivateFieldGet(_this, _Location_url, "f").hash;
                    __classPrivateFieldGet(_this, _Location_url, "f").href = generateFullUrl(href);
                    if (lastHash !== __classPrivateFieldGet(_this, _Location_url, "f").hash) {
                        __classPrivateFieldGet(_this, _Location_window, "f").trigger("hashchange");
                    }
                    __classPrivateFieldSet(_assert_this_initialized(_this), _Location_noCheckUrl, false, "f");
                }, null);
                _this.on(CONTEXT_ACTIONS.INIT, function() {
                    __classPrivateFieldGet(_this, _Location_instances, "m", _Location_reset).call(_assert_this_initialized(_this));
                }, null);
                _this.on(CONTEXT_ACTIONS.RESTORE, function(pageId2) {
                    cache.set(pageId2, {
                        lastHref: _this.href
                    });
                }, null);
                _this.on(CONTEXT_ACTIONS.RECOVER, function(pageId2) {
                    if (cache.has(pageId2)) {
                        var ctx = cache.get(pageId2);
                        __classPrivateFieldSet(_assert_this_initialized(_this), _Location_noCheckUrl, true, "f");
                        __classPrivateFieldGet(_this, _Location_url, "f").href = ctx.lastHref;
                        __classPrivateFieldSet(_assert_this_initialized(_this), _Location_noCheckUrl, false, "f");
                    }
                }, null);
                _this.on(CONTEXT_ACTIONS.DESTORY, function(pageId2) {
                    cache.delete(pageId2);
                }, null);
                return _this;
            }
            _create_class(Location, [
                {
                    key: "protocol",
                    get: function get() {
                        return __classPrivateFieldGet(this, _Location_url, "f").protocol;
                    },
                    set: function set(val) {
                        var REG = /^(http|https):$/i;
                        if (!val || !(0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.isString)(val) || !REG.test(val.trim())) return;
                        val = val.trim();
                        var preValue = __classPrivateFieldGet(this, _Location_instances, "m", _Location_getPreValue).call(this);
                        __classPrivateFieldGet(this, _Location_url, "f").protocol = val;
                        if (__classPrivateFieldGet(this, _Location_instances, "m", _Location_checkUrlChange).call(this, preValue)) __classPrivateFieldGet(this, _Location_instances, "m", _Location_recordHistory).call(this);
                    }
                },
                {
                    key: "host",
                    get: function get() {
                        return __classPrivateFieldGet(this, _Location_url, "f").host;
                    },
                    set: function set(val) {
                        if (!val || !(0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.isString)(val)) return;
                        val = val.trim();
                        var preValue = __classPrivateFieldGet(this, _Location_instances, "m", _Location_getPreValue).call(this);
                        __classPrivateFieldGet(this, _Location_url, "f").host = val;
                        if (__classPrivateFieldGet(this, _Location_instances, "m", _Location_checkUrlChange).call(this, preValue)) __classPrivateFieldGet(this, _Location_instances, "m", _Location_recordHistory).call(this);
                    }
                },
                {
                    key: "hostname",
                    get: function get() {
                        return __classPrivateFieldGet(this, _Location_url, "f").hostname;
                    },
                    set: function set(val) {
                        if (!val || !(0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.isString)(val)) return;
                        val = val.trim();
                        var preValue = __classPrivateFieldGet(this, _Location_instances, "m", _Location_getPreValue).call(this);
                        __classPrivateFieldGet(this, _Location_url, "f").hostname = val;
                        if (__classPrivateFieldGet(this, _Location_instances, "m", _Location_checkUrlChange).call(this, preValue)) __classPrivateFieldGet(this, _Location_instances, "m", _Location_recordHistory).call(this);
                    }
                },
                {
                    key: "port",
                    get: function get() {
                        return __classPrivateFieldGet(this, _Location_url, "f").port;
                    },
                    set: function set(val) {
                        var xVal = Number(val = val.trim());
                        if (!(0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.isNumber)(xVal) || xVal <= 0) return;
                        var preValue = __classPrivateFieldGet(this, _Location_instances, "m", _Location_getPreValue).call(this);
                        __classPrivateFieldGet(this, _Location_url, "f").port = val;
                        if (__classPrivateFieldGet(this, _Location_instances, "m", _Location_checkUrlChange).call(this, preValue)) __classPrivateFieldGet(this, _Location_instances, "m", _Location_recordHistory).call(this);
                    }
                },
                {
                    key: "pathname",
                    get: function get() {
                        return __classPrivateFieldGet(this, _Location_url, "f").pathname;
                    },
                    set: function set(val) {
                        if (!val || !(0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.isString)(val)) return;
                        val = val.trim();
                        var preValue = __classPrivateFieldGet(this, _Location_instances, "m", _Location_getPreValue).call(this);
                        __classPrivateFieldGet(this, _Location_url, "f").pathname = val;
                        if (__classPrivateFieldGet(this, _Location_instances, "m", _Location_checkUrlChange).call(this, preValue)) __classPrivateFieldGet(this, _Location_instances, "m", _Location_recordHistory).call(this);
                    }
                },
                {
                    key: "search",
                    get: function get() {
                        return __classPrivateFieldGet(this, _Location_url, "f").search;
                    },
                    set: function set(val) {
                        if (!val || !(0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.isString)(val)) return;
                        val = val.trim();
                        val = val.startsWith("?") ? val : "?".concat(val);
                        var preValue = __classPrivateFieldGet(this, _Location_instances, "m", _Location_getPreValue).call(this);
                        __classPrivateFieldGet(this, _Location_url, "f").search = val;
                        if (__classPrivateFieldGet(this, _Location_instances, "m", _Location_checkUrlChange).call(this, preValue)) __classPrivateFieldGet(this, _Location_instances, "m", _Location_recordHistory).call(this);
                    }
                },
                {
                    key: "hash",
                    get: function get() {
                        return __classPrivateFieldGet(this, _Location_url, "f").hash;
                    },
                    set: function set(val) {
                        if (!val || !(0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.isString)(val)) return;
                        val = val.trim();
                        val = val.startsWith("#") ? val : "#".concat(val);
                        var preValue = __classPrivateFieldGet(this, _Location_instances, "m", _Location_getPreValue).call(this);
                        __classPrivateFieldGet(this, _Location_url, "f").hash = val;
                        if (__classPrivateFieldGet(this, _Location_instances, "m", _Location_checkUrlChange).call(this, preValue)) __classPrivateFieldGet(this, _Location_instances, "m", _Location_recordHistory).call(this);
                    }
                },
                {
                    key: "href",
                    get: function get() {
                        return __classPrivateFieldGet(this, _Location_url, "f").href;
                    },
                    set: function set(val) {
                        var REG = /^(http:|https:)?\/\/.+/;
                        if (!val || !(0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.isString)(val) || !REG.test(val = val.trim())) return;
                        var preValue = __classPrivateFieldGet(this, _Location_instances, "m", _Location_getPreValue).call(this);
                        __classPrivateFieldGet(this, _Location_url, "f").href = val;
                        if (__classPrivateFieldGet(this, _Location_instances, "m", _Location_checkUrlChange).call(this, preValue)) __classPrivateFieldGet(this, _Location_instances, "m", _Location_recordHistory).call(this);
                    }
                },
                {
                    key: "origin",
                    get: function get() {
                        return __classPrivateFieldGet(this, _Location_url, "f").origin;
                    },
                    set: function set(val) {
                        var REG = /^(http:|https:)?\/\/.+/;
                        if (!val || !(0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.isString)(val) || !REG.test(val = val.trim())) return;
                        var preValue = __classPrivateFieldGet(this, _Location_instances, "m", _Location_getPreValue).call(this);
                        __classPrivateFieldGet(this, _Location_url, "f").origin = val;
                        if (__classPrivateFieldGet(this, _Location_instances, "m", _Location_checkUrlChange).call(this, preValue)) __classPrivateFieldGet(this, _Location_instances, "m", _Location_recordHistory).call(this);
                    }
                },
                {
                    key: "assign",
                    value: function assign() {
                        (0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.warn)(true, "小程序环境中调用location.assign()无效.");
                    }
                },
                {
                    key: "reload",
                    value: function reload() {
                        (0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.warn)(true, "小程序环境中调用location.reload()无效.");
                    }
                },
                {
                    key: "replace",
                    value: function replace(url) {
                        this.trigger("__set_href_without_history__", url);
                    }
                },
                {
                    key: "toString",
                    value: function toString() {
                        return this.href;
                    }
                },
                {
                    key: "cache",
                    get: function get() {
                        return cache;
                    }
                }
            ]);
            return Location;
        }(_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.Events);
        _Location_url = /* @__PURE__ */ new WeakMap(), _Location_noCheckUrl = /* @__PURE__ */ new WeakMap(), _Location_window = /* @__PURE__ */ new WeakMap(), _Location_instances = /* @__PURE__ */ new WeakSet(), _Location_reset = function _Location_reset2() {
            var Current2 = getCurrentInstance();
            var router = Current2.router;
            if (router) {
                var path = router.path, params = router.params;
                var searchArr = Object.keys(params).map(function(key) {
                    return "".concat(key, "=").concat(params[key]);
                });
                var searchStr = searchArr.length > 0 ? "?" + searchArr.join("&") : "";
                var url = "".concat(INIT_URL).concat(path.startsWith("/") ? path : "/" + path).concat(searchStr);
                __classPrivateFieldSet(this, _Location_url, new URL(url), "f");
                this.trigger("__reset_history__", this.href);
            }
        }, _Location_getPreValue = function _Location_getPreValue2() {
            return __classPrivateFieldGet(this, _Location_url, "f")._toRaw();
        }, _Location_rollBack = function _Location_rollBack2(href) {
            __classPrivateFieldGet(this, _Location_url, "f").href = href;
        }, _Location_recordHistory = function _Location_recordHistory2() {
            this.trigger("__record_history__", this.href);
        }, _Location_checkUrlChange = function _Location_checkUrlChange2(preValue) {
            if (__classPrivateFieldGet(this, _Location_noCheckUrl, "f")) {
                return false;
            }
            var __classPrivateFieldGet__toRaw = __classPrivateFieldGet(this, _Location_url, "f")._toRaw(), protocol = __classPrivateFieldGet__toRaw.protocol, hostname = __classPrivateFieldGet__toRaw.hostname, port = __classPrivateFieldGet__toRaw.port, pathname = __classPrivateFieldGet__toRaw.pathname, search = __classPrivateFieldGet__toRaw.search, hash = __classPrivateFieldGet__toRaw.hash;
            if (protocol !== preValue.protocol || hostname !== preValue.hostname || port !== preValue.port) {
                __classPrivateFieldGet(this, _Location_instances, "m", _Location_rollBack).call(this, preValue.href);
                return false;
            }
            if (pathname !== preValue.pathname) {
                return true;
            }
            if (search !== preValue.search) {
                return true;
            }
            if (hash !== preValue.hash) {
                __classPrivateFieldGet(this, _Location_window, "f").trigger("hashchange");
                return true;
            }
            __classPrivateFieldGet(this, _Location_instances, "m", _Location_rollBack).call(this, preValue.href);
            return false;
        };
        machine = "Macintosh";
        arch = "Intel Mac OS X 10_14_5";
        engine = "AppleWebKit/534.36 (KHTML, like Gecko) NodeJS/v4.1.0 Chrome/76.0.3809.132 Safari/534.36";
        msg = "(" + machine + "; " + arch + ") " + engine;
        nav = (0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.isWebPlatform)() ? env.window.navigator : {
            appCodeName: "Mozilla",
            appName: "Netscape",
            appVersion: "5.0 " + msg,
            cookieEnabled: true,
            mimeTypes: [],
            onLine: true,
            platform: "MacIntel",
            plugins: [],
            product: "Taro",
            productSub: "20030107",
            userAgent: "Mozilla/5.0 " + msg,
            vendor: "Joyent",
            vendorSub: ""
        };
        (function() {
            var loadTime;
            if (typeof performance !== "undefined" && performance !== null && performance.now) {
                now = function() {
                    return performance.now();
                };
            } else if (Date.now) {
                loadTime = Date.now();
                now = function() {
                    return Date.now() - loadTime;
                };
            } else {
                loadTime = new Date().getTime();
                now = function() {
                    return new Date().getTime() - loadTime;
                };
            }
        })();
        lastTime = 0;
        _raf = typeof requestAnimationFrame !== "undefined" && requestAnimationFrame !== null ? requestAnimationFrame : function _raf(callback) {
            var _now = now();
            var nextTime = Math.max(lastTime + 16, _now);
            return setTimeout(function() {
                callback(lastTime = nextTime);
            }, nextTime - _now);
        };
        _caf = typeof cancelAnimationFrame !== "undefined" && cancelAnimationFrame !== null ? cancelAnimationFrame : function _caf(seed) {
            clearTimeout(seed);
        };
        if (!(0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.isWebPlatform)()) {
            var Window = /*#__PURE__*/ function(Events) {
                "use strict";
                _inherits(Window, Events);
                var _super = _create_super(Window);
                function Window() {
                    _class_call_check(this, Window);
                    var _this;
                    _this = _super.call(this);
                    _this.navigator = nav;
                    _this.requestAnimationFrame = _raf;
                    _this.cancelAnimationFrame = _caf;
                    _this.getComputedStyle = getComputedStyle;
                    var globalProperties = _to_consumable_array(Object.getOwnPropertyNames(__webpack_require__.g || {})).concat(_to_consumable_array(Object.getOwnPropertySymbols(__webpack_require__.g || {})));
                    globalProperties.forEach(function(property) {
                        if (property === "atob" || property === "document") return;
                        if (!Object.prototype.hasOwnProperty.call(_assert_this_initialized(_this), property)) {
                            _this[property] = __webpack_require__.g[property];
                        }
                    });
                    _this.Date || (_this.Date = Date);
                    _this.location = new Location({
                        window: _assert_this_initialized(_this)
                    });
                    _this.history = new History(_this.location, {
                        window: _assert_this_initialized(_this)
                    });
                    _this.initEvent();
                    return _this;
                }
                _create_class(Window, [
                    {
                        key: "initEvent",
                        value: function initEvent() {
                            var _location = this.location;
                            var _history = this.history;
                            this.on(CONTEXT_ACTIONS.INIT, function(pageId2) {
                                _location.trigger(CONTEXT_ACTIONS.INIT, pageId2);
                            }, null);
                            this.on(CONTEXT_ACTIONS.RECOVER, function(pageId2) {
                                _location.trigger(CONTEXT_ACTIONS.RECOVER, pageId2);
                                _history.trigger(CONTEXT_ACTIONS.RECOVER, pageId2);
                            }, null);
                            this.on(CONTEXT_ACTIONS.RESTORE, function(pageId2) {
                                _location.trigger(CONTEXT_ACTIONS.RESTORE, pageId2);
                                _history.trigger(CONTEXT_ACTIONS.RESTORE, pageId2);
                            }, null);
                            this.on(CONTEXT_ACTIONS.DESTORY, function(pageId2) {
                                _location.trigger(CONTEXT_ACTIONS.DESTORY, pageId2);
                                _history.trigger(CONTEXT_ACTIONS.DESTORY, pageId2);
                            }, null);
                        }
                    },
                    {
                        key: "document",
                        get: function get() {
                            return env.document;
                        }
                    },
                    {
                        key: "addEventListener",
                        value: function addEventListener(event, callback) {
                            if (!(0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.isString)(event)) return;
                            this.on(event, callback, null);
                        }
                    },
                    {
                        key: "removeEventListener",
                        value: function removeEventListener(event, callback) {
                            if (!(0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.isString)(event)) return;
                            this.off(event, callback, null);
                        }
                    },
                    {
                        key: "setTimeout",
                        value: function setTimeout1() {
                            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
                                args[_key] = arguments[_key];
                            }
                            return setTimeout.apply(void 0, _to_consumable_array(args));
                        }
                    },
                    {
                        key: "clearTimeout",
                        value: function clearTimeout1() {
                            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
                                args[_key] = arguments[_key];
                            }
                            return clearTimeout.apply(void 0, _to_consumable_array(args));
                        }
                    }
                ]);
                return Window;
            }(_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.Events);
            window$1 = env.window = new Window();
        } else {
            window$1 = env.window;
        }
        location = window$1.location;
        history = window$1.history;
        SVGElement = /*#__PURE__*/ function(TaroElement) {
            "use strict";
            _inherits(SVGElement, TaroElement);
            var _super = _create_super(SVGElement);
            function SVGElement() {
                _class_call_check(this, SVGElement);
                return _super.apply(this, arguments);
            }
            return SVGElement;
        }(TaroElement);
        instances = /* @__PURE__ */ new Map();
        pageId = incrementId();
        isWeb = (0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.isWebPlatform)();
        nextTick = function(cb, ctx) {
            var _a, _b, _c;
            var router = Current.router;
            var timerFunc = function() {
                setTimeout(function() {
                    ctx ? cb.call(ctx) : cb();
                }, 1);
            };
            if (router !== null) {
                var pageElement = null;
                var path = router.$taroPath;
                pageElement = env.document.getElementById(path);
                if (pageElement === null || pageElement === void 0 ? void 0 : pageElement.pendingUpdate) {
                    if ((0,_chunk_GP2QOTEZ_js__WEBPACK_IMPORTED_MODULE_0__.isWebPlatform)()) {
                        (_c = (_b = (_a = pageElement.firstChild) === null || _a === void 0 ? void 0 : _a["componentOnReady"]) === null || _b === void 0 ? void 0 : _b.call(_a).then(function() {
                            timerFunc();
                        })) !== null && _c !== void 0 ? _c : timerFunc();
                    } else {
                        pageElement.enqueueUpdateCallback(cb, ctx);
                    }
                } else {
                    timerFunc();
                }
            } else {
                timerFunc();
            }
        };
    }
});



/***/ })

}]);